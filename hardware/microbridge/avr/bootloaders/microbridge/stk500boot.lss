
stk500boot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  0003f7d2  00001866  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017d2  0003e000  0003e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013b  00800212  00800212  00001878  2**0
                  ALLOC
  3 .stab         00000cf0  00000000  00000000  00001878  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000023f  00000000  00000000  00002568  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000150  00000000  00000000  000027a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b23  00000000  00000000  000028f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000631  00000000  00000000  0000441b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000999  00000000  00000000  00004a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  000053e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000570  00000000  00000000  000057bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f24  00000000  00000000  00005d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00007c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0003e000 <__vectors>:
   3e000:	77 c0       	rjmp	.+238    	; 0x3e0f0 <__ctors_end>
   3e002:	00 00       	nop
   3e004:	9d c0       	rjmp	.+314    	; 0x3e140 <__bad_interrupt>
   3e006:	00 00       	nop
   3e008:	9b c0       	rjmp	.+310    	; 0x3e140 <__bad_interrupt>
   3e00a:	00 00       	nop
   3e00c:	99 c0       	rjmp	.+306    	; 0x3e140 <__bad_interrupt>
   3e00e:	00 00       	nop
   3e010:	97 c0       	rjmp	.+302    	; 0x3e140 <__bad_interrupt>
   3e012:	00 00       	nop
   3e014:	95 c0       	rjmp	.+298    	; 0x3e140 <__bad_interrupt>
   3e016:	00 00       	nop
   3e018:	93 c0       	rjmp	.+294    	; 0x3e140 <__bad_interrupt>
   3e01a:	00 00       	nop
   3e01c:	91 c0       	rjmp	.+290    	; 0x3e140 <__bad_interrupt>
   3e01e:	00 00       	nop
   3e020:	8f c0       	rjmp	.+286    	; 0x3e140 <__bad_interrupt>
   3e022:	00 00       	nop
   3e024:	8d c0       	rjmp	.+282    	; 0x3e140 <__bad_interrupt>
   3e026:	00 00       	nop
   3e028:	8b c0       	rjmp	.+278    	; 0x3e140 <__bad_interrupt>
   3e02a:	00 00       	nop
   3e02c:	89 c0       	rjmp	.+274    	; 0x3e140 <__bad_interrupt>
   3e02e:	00 00       	nop
   3e030:	87 c0       	rjmp	.+270    	; 0x3e140 <__bad_interrupt>
   3e032:	00 00       	nop
   3e034:	85 c0       	rjmp	.+266    	; 0x3e140 <__bad_interrupt>
   3e036:	00 00       	nop
   3e038:	83 c0       	rjmp	.+262    	; 0x3e140 <__bad_interrupt>
   3e03a:	00 00       	nop
   3e03c:	81 c0       	rjmp	.+258    	; 0x3e140 <__bad_interrupt>
   3e03e:	00 00       	nop
   3e040:	7f c0       	rjmp	.+254    	; 0x3e140 <__bad_interrupt>
   3e042:	00 00       	nop
   3e044:	7d c0       	rjmp	.+250    	; 0x3e140 <__bad_interrupt>
   3e046:	00 00       	nop
   3e048:	7b c0       	rjmp	.+246    	; 0x3e140 <__bad_interrupt>
   3e04a:	00 00       	nop
   3e04c:	79 c0       	rjmp	.+242    	; 0x3e140 <__bad_interrupt>
   3e04e:	00 00       	nop
   3e050:	77 c0       	rjmp	.+238    	; 0x3e140 <__bad_interrupt>
   3e052:	00 00       	nop
   3e054:	75 c0       	rjmp	.+234    	; 0x3e140 <__bad_interrupt>
   3e056:	00 00       	nop
   3e058:	73 c0       	rjmp	.+230    	; 0x3e140 <__bad_interrupt>
   3e05a:	00 00       	nop
   3e05c:	71 c0       	rjmp	.+226    	; 0x3e140 <__bad_interrupt>
   3e05e:	00 00       	nop
   3e060:	6f c0       	rjmp	.+222    	; 0x3e140 <__bad_interrupt>
   3e062:	00 00       	nop
   3e064:	6d c0       	rjmp	.+218    	; 0x3e140 <__bad_interrupt>
   3e066:	00 00       	nop
   3e068:	6b c0       	rjmp	.+214    	; 0x3e140 <__bad_interrupt>
   3e06a:	00 00       	nop
   3e06c:	69 c0       	rjmp	.+210    	; 0x3e140 <__bad_interrupt>
   3e06e:	00 00       	nop
   3e070:	67 c0       	rjmp	.+206    	; 0x3e140 <__bad_interrupt>
   3e072:	00 00       	nop
   3e074:	65 c0       	rjmp	.+202    	; 0x3e140 <__bad_interrupt>
   3e076:	00 00       	nop
   3e078:	63 c0       	rjmp	.+198    	; 0x3e140 <__bad_interrupt>
   3e07a:	00 00       	nop
   3e07c:	61 c0       	rjmp	.+194    	; 0x3e140 <__bad_interrupt>
   3e07e:	00 00       	nop
   3e080:	5f c0       	rjmp	.+190    	; 0x3e140 <__bad_interrupt>
   3e082:	00 00       	nop
   3e084:	5d c0       	rjmp	.+186    	; 0x3e140 <__bad_interrupt>
   3e086:	00 00       	nop
   3e088:	5b c0       	rjmp	.+182    	; 0x3e140 <__bad_interrupt>
   3e08a:	00 00       	nop
   3e08c:	59 c0       	rjmp	.+178    	; 0x3e140 <__bad_interrupt>
   3e08e:	00 00       	nop
   3e090:	57 c0       	rjmp	.+174    	; 0x3e140 <__bad_interrupt>
   3e092:	00 00       	nop
   3e094:	55 c0       	rjmp	.+170    	; 0x3e140 <__bad_interrupt>
   3e096:	00 00       	nop
   3e098:	53 c0       	rjmp	.+166    	; 0x3e140 <__bad_interrupt>
   3e09a:	00 00       	nop
   3e09c:	51 c0       	rjmp	.+162    	; 0x3e140 <__bad_interrupt>
   3e09e:	00 00       	nop
   3e0a0:	4f c0       	rjmp	.+158    	; 0x3e140 <__bad_interrupt>
   3e0a2:	00 00       	nop
   3e0a4:	4d c0       	rjmp	.+154    	; 0x3e140 <__bad_interrupt>
   3e0a6:	00 00       	nop
   3e0a8:	4b c0       	rjmp	.+150    	; 0x3e140 <__bad_interrupt>
   3e0aa:	00 00       	nop
   3e0ac:	49 c0       	rjmp	.+146    	; 0x3e140 <__bad_interrupt>
   3e0ae:	00 00       	nop
   3e0b0:	47 c0       	rjmp	.+142    	; 0x3e140 <__bad_interrupt>
   3e0b2:	00 00       	nop
   3e0b4:	45 c0       	rjmp	.+138    	; 0x3e140 <__bad_interrupt>
   3e0b6:	00 00       	nop
   3e0b8:	43 c0       	rjmp	.+134    	; 0x3e140 <__bad_interrupt>
   3e0ba:	00 00       	nop
   3e0bc:	41 c0       	rjmp	.+130    	; 0x3e140 <__bad_interrupt>
   3e0be:	00 00       	nop
   3e0c0:	3f c0       	rjmp	.+126    	; 0x3e140 <__bad_interrupt>
   3e0c2:	00 00       	nop
   3e0c4:	3d c0       	rjmp	.+122    	; 0x3e140 <__bad_interrupt>
   3e0c6:	00 00       	nop
   3e0c8:	3b c0       	rjmp	.+118    	; 0x3e140 <__bad_interrupt>
   3e0ca:	00 00       	nop
   3e0cc:	39 c0       	rjmp	.+114    	; 0x3e140 <__bad_interrupt>
   3e0ce:	00 00       	nop
   3e0d0:	37 c0       	rjmp	.+110    	; 0x3e140 <__bad_interrupt>
   3e0d2:	00 00       	nop
   3e0d4:	35 c0       	rjmp	.+106    	; 0x3e140 <__bad_interrupt>
   3e0d6:	00 00       	nop
   3e0d8:	33 c0       	rjmp	.+102    	; 0x3e140 <__bad_interrupt>
   3e0da:	00 00       	nop
   3e0dc:	31 c0       	rjmp	.+98     	; 0x3e140 <__bad_interrupt>
   3e0de:	00 00       	nop
   3e0e0:	2f c0       	rjmp	.+94     	; 0x3e140 <__bad_interrupt>
	...

0003e0e4 <gTextMsg_CPU_Name>:
   3e0e4:	41 54 6d 65 67 61 32 35 36 30 00 00                 ATmega2560..

0003e0f0 <__ctors_end>:
   3e0f0:	11 24       	eor	r1, r1
   3e0f2:	1f be       	out	0x3f, r1	; 63
   3e0f4:	cf ef       	ldi	r28, 0xFF	; 255
   3e0f6:	d1 e2       	ldi	r29, 0x21	; 33
   3e0f8:	de bf       	out	0x3e, r29	; 62
   3e0fa:	cd bf       	out	0x3d, r28	; 61
   3e0fc:	01 e0       	ldi	r16, 0x01	; 1
   3e0fe:	0c bf       	out	0x3c, r16	; 60

0003e100 <__do_copy_data>:
   3e100:	12 e0       	ldi	r17, 0x02	; 2
   3e102:	a0 e0       	ldi	r26, 0x00	; 0
   3e104:	b2 e0       	ldi	r27, 0x02	; 2
   3e106:	e2 ed       	ldi	r30, 0xD2	; 210
   3e108:	f7 ef       	ldi	r31, 0xF7	; 247
   3e10a:	03 e0       	ldi	r16, 0x03	; 3
   3e10c:	0b bf       	out	0x3b, r16	; 59
   3e10e:	02 c0       	rjmp	.+4      	; 0x3e114 <__do_copy_data+0x14>
   3e110:	07 90       	elpm	r0, Z+
   3e112:	0d 92       	st	X+, r0
   3e114:	a2 31       	cpi	r26, 0x12	; 18
   3e116:	b1 07       	cpc	r27, r17
   3e118:	d9 f7       	brne	.-10     	; 0x3e110 <__do_copy_data+0x10>
   3e11a:	1b be       	out	0x3b, r1	; 59

0003e11c <__do_clear_bss>:
   3e11c:	13 e0       	ldi	r17, 0x03	; 3
   3e11e:	a2 e1       	ldi	r26, 0x12	; 18
   3e120:	b2 e0       	ldi	r27, 0x02	; 2
   3e122:	01 c0       	rjmp	.+2      	; 0x3e126 <.do_clear_bss_start>

0003e124 <.do_clear_bss_loop>:
   3e124:	1d 92       	st	X+, r1

0003e126 <.do_clear_bss_start>:
   3e126:	ad 34       	cpi	r26, 0x4D	; 77
   3e128:	b1 07       	cpc	r27, r17
   3e12a:	e1 f7       	brne	.-8      	; 0x3e124 <.do_clear_bss_loop>
   3e12c:	bc d6       	rcall	.+3448   	; 0x3eea6 <main>
   3e12e:	0d 94 e7 fb 	jmp	0x3f7ce	; 0x3f7ce <_exit>

0003e132 <__jumpMain>:

	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );

//*	set stack pointer to top of RAM

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
   3e132:	01 e2       	ldi	r16, 0x21	; 33
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3e134:	0e bf       	out	0x3e, r16	; 62

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3e136:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3e138:	0d bf       	out	0x3d, r16	; 61

	asm volatile ( "clr __zero_reg__" );									// GCC depends on register r1 set to 0
   3e13a:	11 24       	eor	r1, r1
	asm volatile ( "out %0, __zero_reg__" :: "I" (_SFR_IO_ADDR(SREG)) );	// set SREG to 0
   3e13c:	1f be       	out	0x3f, r1	; 63
	asm volatile ( "jmp main");												// jump to main()
   3e13e:	b3 c6       	rjmp	.+3430   	; 0x3eea6 <main>

0003e140 <__bad_interrupt>:
   3e140:	5f cf       	rjmp	.-322    	; 0x3e000 <__vectors>

0003e142 <sendchar>:
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e142:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e146:	80 91 c0 00 	lds	r24, 0x00C0
   3e14a:	86 ff       	sbrs	r24, 6
   3e14c:	fc cf       	rjmp	.-8      	; 0x3e146 <sendchar+0x4>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e14e:	80 91 c0 00 	lds	r24, 0x00C0
   3e152:	80 64       	ori	r24, 0x40	; 64
   3e154:	80 93 c0 00 	sts	0x00C0, r24
}
   3e158:	08 95       	ret

0003e15a <delay_ms>:

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3e15a:	20 e0       	ldi	r18, 0x00	; 0
   3e15c:	30 e0       	ldi	r19, 0x00	; 0
   3e15e:	08 c0       	rjmp	.+16     	; 0x3e170 <delay_ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3e160:	ef ec       	ldi	r30, 0xCF	; 207
   3e162:	f7 e0       	ldi	r31, 0x07	; 7
   3e164:	31 97       	sbiw	r30, 0x01	; 1
   3e166:	f1 f7       	brne	.-4      	; 0x3e164 <delay_ms+0xa>
   3e168:	00 c0       	rjmp	.+0      	; 0x3e16a <delay_ms+0x10>
   3e16a:	00 00       	nop
   3e16c:	2f 5f       	subi	r18, 0xFF	; 255
   3e16e:	3f 4f       	sbci	r19, 0xFF	; 255
   3e170:	28 17       	cp	r18, r24
   3e172:	39 07       	cpc	r19, r25
   3e174:	a9 f7       	brne	.-22     	; 0x3e160 <delay_ms+0x6>
	{
		_delay_ms(0.5);
	}
}
   3e176:	08 95       	ret

0003e178 <PrintFromPROGMEM>:



//************************************************************************
void	PrintFromPROGMEM(const void *dataPtr, unsigned char offset)
{
   3e178:	cf 93       	push	r28
   3e17a:	df 93       	push	r29
char	theChar;

	dataPtr		+=	offset;
   3e17c:	ec 01       	movw	r28, r24
   3e17e:	c6 0f       	add	r28, r22
   3e180:	d1 1d       	adc	r29, r1

	do {
	#if (FLASHEND > 0x10000)
		theChar	=	pgm_read_byte_far((uint16_t)dataPtr++);
   3e182:	ce 01       	movw	r24, r28
   3e184:	a0 e0       	ldi	r26, 0x00	; 0
   3e186:	b0 e0       	ldi	r27, 0x00	; 0
   3e188:	21 96       	adiw	r28, 0x01	; 1
   3e18a:	ab bf       	out	0x3b, r26	; 59
   3e18c:	fc 01       	movw	r30, r24
   3e18e:	87 91       	elpm	r24, Z+
	#else
		theChar	=	pgm_read_byte_near((uint16_t)dataPtr++);
	#endif
		if (theChar != 0)
   3e190:	88 23       	and	r24, r24
   3e192:	11 f0       	breq	.+4      	; 0x3e198 <PrintFromPROGMEM+0x20>
		{
			sendchar(theChar);
   3e194:	d6 df       	rcall	.-84     	; 0x3e142 <sendchar>
   3e196:	f5 cf       	rjmp	.-22     	; 0x3e182 <PrintFromPROGMEM+0xa>
   3e198:	df 91       	pop	r29
		}
	} while (theChar != 0);
}
   3e19a:	cf 91       	pop	r28
   3e19c:	08 95       	ret

0003e19e <PrintNewLine>:
   3e19e:	8d e0       	ldi	r24, 0x0D	; 13

//************************************************************************
void	PrintNewLine(void)
{
	sendchar(0x0d);
   3e1a0:	d0 df       	rcall	.-96     	; 0x3e142 <sendchar>
   3e1a2:	8a e0       	ldi	r24, 0x0A	; 10
   3e1a4:	ce cf       	rjmp	.-100    	; 0x3e142 <sendchar>

0003e1a6 <PrintFromPROGMEMln>:
	sendchar(0x0a);
   3e1a6:	e8 df       	rcall	.-48     	; 0x3e178 <PrintFromPROGMEM>
   3e1a8:	fa cf       	rjmp	.-12     	; 0x3e19e <PrintNewLine>

0003e1aa <PrintString>:
   3e1aa:	cf 93       	push	r28
}
   3e1ac:	df 93       	push	r29


//************************************************************************
void	PrintFromPROGMEMln(const void *dataPtr, unsigned char offset)
{
	PrintFromPROGMEM(dataPtr, offset);
   3e1ae:	ec 01       	movw	r28, r24
   3e1b0:	89 91       	ld	r24, Y+

	PrintNewLine();
   3e1b2:	88 23       	and	r24, r24
   3e1b4:	11 f0       	breq	.+4      	; 0x3e1ba <PrintString+0x10>
}
   3e1b6:	c5 df       	rcall	.-118    	; 0x3e142 <sendchar>


//************************************************************************
void	PrintString(char *textString)
{
   3e1b8:	fb cf       	rjmp	.-10     	; 0x3e1b0 <PrintString+0x6>
   3e1ba:	df 91       	pop	r29
   3e1bc:	cf 91       	pop	r28

	theChar		=	1;
	ii			=	0;
	while (theChar != 0)
	{
		theChar	=	textString[ii];
   3e1be:	08 95       	ret

0003e1c0 <PrintHexByte>:
		if (theChar != 0)
   3e1c0:	cf 93       	push	r28
   3e1c2:	c8 2f       	mov	r28, r24
		{
			sendchar(theChar);
   3e1c4:	98 2f       	mov	r25, r24
   3e1c6:	92 95       	swap	r25
   3e1c8:	9f 70       	andi	r25, 0x0F	; 15
		}
		ii++;
	}
}
   3e1ca:	89 2f       	mov	r24, r25
   3e1cc:	80 5d       	subi	r24, 0xD0	; 208
   3e1ce:	8a 33       	cpi	r24, 0x3A	; 58

//************************************************************************
void	PrintHexByte(unsigned char theByte)
{
   3e1d0:	08 f0       	brcs	.+2      	; 0x3e1d4 <PrintHexByte+0x14>
   3e1d2:	89 5f       	subi	r24, 0xF9	; 249
char	theChar;

	theChar	=	0x30 + ((theByte >> 4) & 0x0f);
   3e1d4:	b6 df       	rcall	.-148    	; 0x3e142 <sendchar>
   3e1d6:	cf 70       	andi	r28, 0x0F	; 15
   3e1d8:	8c 2f       	mov	r24, r28
   3e1da:	80 5d       	subi	r24, 0xD0	; 208
   3e1dc:	8a 33       	cpi	r24, 0x3A	; 58
	if (theChar > 0x39)
   3e1de:	08 f0       	brcs	.+2      	; 0x3e1e2 <PrintHexByte+0x22>
   3e1e0:	89 5f       	subi	r24, 0xF9	; 249
	{
		theChar	+=	7;
   3e1e2:	af df       	rcall	.-162    	; 0x3e142 <sendchar>
	}
	sendchar(theChar );
   3e1e4:	cf 91       	pop	r28
   3e1e6:	08 95       	ret

0003e1e8 <PrintDecInt>:

	theChar	=	0x30 + (theByte & 0x0f);
   3e1e8:	0f 93       	push	r16
   3e1ea:	1f 93       	push	r17
   3e1ec:	cf 93       	push	r28
	if (theChar > 0x39)
   3e1ee:	df 93       	push	r29
   3e1f0:	ec 01       	movw	r28, r24
	{
		theChar	+=	7;
   3e1f2:	8b 01       	movw	r16, r22
	}
	sendchar(theChar );
   3e1f4:	85 36       	cpi	r24, 0x65	; 101
   3e1f6:	91 05       	cpc	r25, r1
}
   3e1f8:	1c f4       	brge	.+6      	; 0x3e200 <PrintDecInt+0x18>
   3e1fa:	63 30       	cpi	r22, 0x03	; 3

//************************************************************************
void	PrintDecInt(int theNumber, int digitCnt)
{
   3e1fc:	71 05       	cpc	r23, r1
   3e1fe:	44 f0       	brlt	.+16     	; 0x3e210 <PrintDecInt+0x28>
   3e200:	ce 01       	movw	r24, r28
   3e202:	64 e6       	ldi	r22, 0x64	; 100
   3e204:	70 e0       	ldi	r23, 0x00	; 0
   3e206:	0f 94 81 fb 	call	0x3f702	; 0x3f702 <__divmodhi4>
int	theChar;
int	myNumber;

	myNumber	=	theNumber;

	if ((myNumber > 100) || (digitCnt >= 3))
   3e20a:	86 2f       	mov	r24, r22
   3e20c:	80 5d       	subi	r24, 0xD0	; 208
   3e20e:	99 df       	rcall	.-206    	; 0x3e142 <sendchar>
   3e210:	cb 30       	cpi	r28, 0x0B	; 11
   3e212:	d1 05       	cpc	r29, r1
	{
		theChar		=	0x30 + myNumber / 100;
   3e214:	1c f4       	brge	.+6      	; 0x3e21c <PrintDecInt+0x34>
   3e216:	02 30       	cpi	r16, 0x02	; 2
   3e218:	11 05       	cpc	r17, r1
   3e21a:	64 f0       	brlt	.+24     	; 0x3e234 <PrintDecInt+0x4c>
   3e21c:	ce 01       	movw	r24, r28
		sendchar(theChar );
   3e21e:	64 e6       	ldi	r22, 0x64	; 100
   3e220:	70 e0       	ldi	r23, 0x00	; 0
   3e222:	0f 94 81 fb 	call	0x3f702	; 0x3f702 <__divmodhi4>
	}

	if ((myNumber > 10) || (digitCnt >= 2))
   3e226:	6a e0       	ldi	r22, 0x0A	; 10
   3e228:	70 e0       	ldi	r23, 0x00	; 0
   3e22a:	0f 94 81 fb 	call	0x3f702	; 0x3f702 <__divmodhi4>
   3e22e:	86 2f       	mov	r24, r22
   3e230:	80 5d       	subi	r24, 0xD0	; 208
	{
		theChar	=	0x30  + ((myNumber % 100) / 10 );
   3e232:	87 df       	rcall	.-242    	; 0x3e142 <sendchar>
   3e234:	ce 01       	movw	r24, r28
   3e236:	6a e0       	ldi	r22, 0x0A	; 10
   3e238:	70 e0       	ldi	r23, 0x00	; 0
   3e23a:	0f 94 81 fb 	call	0x3f702	; 0x3f702 <__divmodhi4>
   3e23e:	80 5d       	subi	r24, 0xD0	; 208
   3e240:	80 df       	rcall	.-256    	; 0x3e142 <sendchar>
   3e242:	df 91       	pop	r29
		sendchar(theChar );
   3e244:	cf 91       	pop	r28
   3e246:	1f 91       	pop	r17
   3e248:	0f 91       	pop	r16
   3e24a:	08 95       	ret

0003e24c <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
   3e24c:	0f 93       	push	r16
   3e24e:	1f 93       	push	r17
   3e250:	cf 93       	push	r28
   3e252:	df 93       	push	r29
	FATFS *fs = FatFs;
   3e254:	c0 91 14 02 	lds	r28, 0x0214
   3e258:	d0 91 15 02 	lds	r29, 0x0215


	clst -= 2;
   3e25c:	62 50       	subi	r22, 0x02	; 2
   3e25e:	70 40       	sbci	r23, 0x00	; 0
   3e260:	80 40       	sbci	r24, 0x00	; 0
   3e262:	90 40       	sbci	r25, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   3e264:	0e 81       	ldd	r16, Y+6	; 0x06
   3e266:	1f 81       	ldd	r17, Y+7	; 0x07
   3e268:	28 85       	ldd	r18, Y+8	; 0x08
   3e26a:	39 85       	ldd	r19, Y+9	; 0x09
   3e26c:	02 50       	subi	r16, 0x02	; 2
   3e26e:	10 40       	sbci	r17, 0x00	; 0
   3e270:	20 40       	sbci	r18, 0x00	; 0
   3e272:	30 40       	sbci	r19, 0x00	; 0
   3e274:	60 17       	cp	r22, r16
   3e276:	71 07       	cpc	r23, r17
   3e278:	82 07       	cpc	r24, r18
   3e27a:	93 07       	cpc	r25, r19
   3e27c:	88 f4       	brcc	.+34     	; 0x3e2a0 <clust2sect+0x54>
	return (DWORD)clst * fs->csize + fs->database;
   3e27e:	2a 81       	ldd	r18, Y+2	; 0x02
   3e280:	30 e0       	ldi	r19, 0x00	; 0
   3e282:	40 e0       	ldi	r20, 0x00	; 0
   3e284:	50 e0       	ldi	r21, 0x00	; 0
   3e286:	0f 94 62 fb 	call	0x3f6c4	; 0x3f6c4 <__mulsi3>
   3e28a:	8b 01       	movw	r16, r22
   3e28c:	9c 01       	movw	r18, r24
   3e28e:	8a 89       	ldd	r24, Y+18	; 0x12
   3e290:	9b 89       	ldd	r25, Y+19	; 0x13
   3e292:	ac 89       	ldd	r26, Y+20	; 0x14
   3e294:	bd 89       	ldd	r27, Y+21	; 0x15
   3e296:	08 0f       	add	r16, r24
   3e298:	19 1f       	adc	r17, r25
   3e29a:	2a 1f       	adc	r18, r26
   3e29c:	3b 1f       	adc	r19, r27
   3e29e:	03 c0       	rjmp	.+6      	; 0x3e2a6 <clust2sect+0x5a>
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   3e2a0:	00 e0       	ldi	r16, 0x00	; 0
   3e2a2:	10 e0       	ldi	r17, 0x00	; 0
   3e2a4:	98 01       	movw	r18, r16
	return (DWORD)clst * fs->csize + fs->database;
}
   3e2a6:	b8 01       	movw	r22, r16
   3e2a8:	c9 01       	movw	r24, r18
   3e2aa:	df 91       	pop	r29
   3e2ac:	cf 91       	pop	r28
   3e2ae:	1f 91       	pop	r17
   3e2b0:	0f 91       	pop	r16
   3e2b2:	08 95       	ret

0003e2b4 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
   3e2b4:	cf 93       	push	r28
   3e2b6:	df 93       	push	r29
   3e2b8:	ec 01       	movw	r28, r24
	CLUST clst;
	FATFS *fs = FatFs;
   3e2ba:	e0 91 14 02 	lds	r30, 0x0214
   3e2be:	f0 91 15 02 	lds	r31, 0x0215


	dj->index = 0;
   3e2c2:	19 82       	std	Y+1, r1	; 0x01
   3e2c4:	18 82       	st	Y, r1
	clst = dj->sclust;
   3e2c6:	8c 81       	ldd	r24, Y+4	; 0x04
   3e2c8:	9d 81       	ldd	r25, Y+5	; 0x05
   3e2ca:	ae 81       	ldd	r26, Y+6	; 0x06
   3e2cc:	bf 81       	ldd	r27, Y+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
   3e2ce:	81 30       	cpi	r24, 0x01	; 1
   3e2d0:	91 05       	cpc	r25, r1
   3e2d2:	a1 05       	cpc	r26, r1
   3e2d4:	b1 05       	cpc	r27, r1
   3e2d6:	61 f1       	breq	.+88     	; 0x3e330 <dir_rewind+0x7c>
   3e2d8:	46 81       	ldd	r20, Z+6	; 0x06
   3e2da:	57 81       	ldd	r21, Z+7	; 0x07
   3e2dc:	60 85       	ldd	r22, Z+8	; 0x08
   3e2de:	71 85       	ldd	r23, Z+9	; 0x09
   3e2e0:	84 17       	cp	r24, r20
   3e2e2:	95 07       	cpc	r25, r21
   3e2e4:	a6 07       	cpc	r26, r22
   3e2e6:	b7 07       	cpc	r27, r23
   3e2e8:	18 f5       	brcc	.+70     	; 0x3e330 <dir_rewind+0x7c>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   3e2ea:	00 97       	sbiw	r24, 0x00	; 0
   3e2ec:	a1 05       	cpc	r26, r1
   3e2ee:	b1 05       	cpc	r27, r1
   3e2f0:	39 f4       	brne	.+14     	; 0x3e300 <dir_rewind+0x4c>
   3e2f2:	20 81       	ld	r18, Z
   3e2f4:	23 30       	cpi	r18, 0x03	; 3
   3e2f6:	21 f4       	brne	.+8      	; 0x3e300 <dir_rewind+0x4c>
		clst = (CLUST)fs->dirbase;
   3e2f8:	86 85       	ldd	r24, Z+14	; 0x0e
   3e2fa:	97 85       	ldd	r25, Z+15	; 0x0f
   3e2fc:	a0 89       	ldd	r26, Z+16	; 0x10
   3e2fe:	b1 89       	ldd	r27, Z+17	; 0x11
	dj->clust = clst;						/* Current cluster */
   3e300:	88 87       	std	Y+8, r24	; 0x08
   3e302:	99 87       	std	Y+9, r25	; 0x09
   3e304:	aa 87       	std	Y+10, r26	; 0x0a
   3e306:	bb 87       	std	Y+11, r27	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
   3e308:	00 97       	sbiw	r24, 0x00	; 0
   3e30a:	a1 05       	cpc	r26, r1
   3e30c:	b1 05       	cpc	r27, r1
   3e30e:	31 f0       	breq	.+12     	; 0x3e31c <dir_rewind+0x68>
   3e310:	bc 01       	movw	r22, r24
   3e312:	cd 01       	movw	r24, r26
   3e314:	9b df       	rcall	.-202    	; 0x3e24c <clust2sect>
   3e316:	dc 01       	movw	r26, r24
   3e318:	cb 01       	movw	r24, r22
   3e31a:	04 c0       	rjmp	.+8      	; 0x3e324 <dir_rewind+0x70>
   3e31c:	86 85       	ldd	r24, Z+14	; 0x0e
   3e31e:	97 85       	ldd	r25, Z+15	; 0x0f
   3e320:	a0 89       	ldd	r26, Z+16	; 0x10
   3e322:	b1 89       	ldd	r27, Z+17	; 0x11
   3e324:	8c 87       	std	Y+12, r24	; 0x0c
   3e326:	9d 87       	std	Y+13, r25	; 0x0d
   3e328:	ae 87       	std	Y+14, r26	; 0x0e
   3e32a:	bf 87       	std	Y+15, r27	; 0x0f
   3e32c:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;	/* Seek succeeded */
   3e32e:	01 c0       	rjmp	.+2      	; 0x3e332 <dir_rewind+0x7e>
   3e330:	81 e0       	ldi	r24, 0x01	; 1


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
   3e332:	df 91       	pop	r29
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */

	return FR_OK;	/* Seek succeeded */
}
   3e334:	cf 91       	pop	r28
   3e336:	08 95       	ret

0003e338 <get_fat>:
   3e338:	0f 93       	push	r16

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
   3e33a:	1f 93       	push	r17
   3e33c:	cf 93       	push	r28
   3e33e:	df 93       	push	r29
   3e340:	00 d0       	rcall	.+0      	; 0x3e342 <get_fat+0xa>
   3e342:	0f 92       	push	r0
   3e344:	cd b7       	in	r28, 0x3d	; 61
   3e346:	de b7       	in	r29, 0x3e	; 62
   3e348:	dc 01       	movw	r26, r24
   3e34a:	cb 01       	movw	r24, r22
   3e34c:	e0 91 14 02 	lds	r30, 0x0214
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
   3e350:	f0 91 15 02 	lds	r31, 0x0215
   3e354:	82 30       	cpi	r24, 0x02	; 2


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
   3e356:	91 05       	cpc	r25, r1
   3e358:	a1 05       	cpc	r26, r1
   3e35a:	b1 05       	cpc	r27, r1
   3e35c:	08 f4       	brcc	.+2      	; 0x3e360 <get_fat+0x28>
   3e35e:	52 c0       	rjmp	.+164    	; 0x3e404 <get_fat+0xcc>
   3e360:	46 81       	ldd	r20, Z+6	; 0x06
   3e362:	57 81       	ldd	r21, Z+7	; 0x07
   3e364:	60 85       	ldd	r22, Z+8	; 0x08
   3e366:	71 85       	ldd	r23, Z+9	; 0x09
   3e368:	84 17       	cp	r24, r20
   3e36a:	95 07       	cpc	r25, r21
   3e36c:	a6 07       	cpc	r26, r22
   3e36e:	b7 07       	cpc	r27, r23
   3e370:	08 f0       	brcs	.+2      	; 0x3e374 <get_fat+0x3c>
   3e372:	48 c0       	rjmp	.+144    	; 0x3e404 <get_fat+0xcc>
   3e374:	20 81       	ld	r18, Z
		return 1;

	switch (fs->fs_type) {
   3e376:	22 30       	cpi	r18, 0x02	; 2
   3e378:	21 f0       	breq	.+8      	; 0x3e382 <get_fat+0x4a>
   3e37a:	23 30       	cpi	r18, 0x03	; 3
   3e37c:	09 f0       	breq	.+2      	; 0x3e380 <get_fat+0x48>
   3e37e:	42 c0       	rjmp	.+132    	; 0x3e404 <get_fat+0xcc>
   3e380:	1c c0       	rjmp	.+56     	; 0x3e3ba <get_fat+0x82>
   3e382:	49 2f       	mov	r20, r25
		}
		wc = LD_WORD(buf);
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
   3e384:	5a 2f       	mov	r21, r26
   3e386:	6b 2f       	mov	r22, r27
   3e388:	77 27       	eor	r23, r23
   3e38a:	02 85       	ldd	r16, Z+10	; 0x0a
   3e38c:	13 85       	ldd	r17, Z+11	; 0x0b
   3e38e:	24 85       	ldd	r18, Z+12	; 0x0c
   3e390:	35 85       	ldd	r19, Z+13	; 0x0d
   3e392:	40 0f       	add	r20, r16
   3e394:	51 1f       	adc	r21, r17
   3e396:	62 1f       	adc	r22, r18
   3e398:	73 1f       	adc	r23, r19
   3e39a:	9c 01       	movw	r18, r24
   3e39c:	30 70       	andi	r19, 0x00	; 0
   3e39e:	22 0f       	add	r18, r18
   3e3a0:	33 1f       	adc	r19, r19
   3e3a2:	ce 01       	movw	r24, r28
   3e3a4:	01 96       	adiw	r24, 0x01	; 1
   3e3a6:	02 e0       	ldi	r16, 0x02	; 2
   3e3a8:	10 e0       	ldi	r17, 0x00	; 0
   3e3aa:	d3 d4       	rcall	.+2470   	; 0x3ed52 <disk_readp>
   3e3ac:	88 23       	and	r24, r24
   3e3ae:	51 f5       	brne	.+84     	; 0x3e404 <get_fat+0xcc>
   3e3b0:	09 81       	ldd	r16, Y+1	; 0x01
   3e3b2:	1a 81       	ldd	r17, Y+2	; 0x02
		return LD_WORD(buf);
   3e3b4:	20 e0       	ldi	r18, 0x00	; 0
   3e3b6:	30 e0       	ldi	r19, 0x00	; 0
   3e3b8:	29 c0       	rjmp	.+82     	; 0x3e40c <get_fat+0xd4>
   3e3ba:	ac 01       	movw	r20, r24
   3e3bc:	bd 01       	movw	r22, r26
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
   3e3be:	27 e0       	ldi	r18, 0x07	; 7
   3e3c0:	76 95       	lsr	r23
   3e3c2:	67 95       	ror	r22
   3e3c4:	57 95       	ror	r21
   3e3c6:	47 95       	ror	r20
   3e3c8:	2a 95       	dec	r18
   3e3ca:	d1 f7       	brne	.-12     	; 0x3e3c0 <get_fat+0x88>
   3e3cc:	02 85       	ldd	r16, Z+10	; 0x0a
   3e3ce:	13 85       	ldd	r17, Z+11	; 0x0b
   3e3d0:	24 85       	ldd	r18, Z+12	; 0x0c
   3e3d2:	35 85       	ldd	r19, Z+13	; 0x0d
   3e3d4:	40 0f       	add	r20, r16
   3e3d6:	51 1f       	adc	r21, r17
   3e3d8:	62 1f       	adc	r22, r18
   3e3da:	73 1f       	adc	r23, r19
   3e3dc:	9c 01       	movw	r18, r24
   3e3de:	2f 77       	andi	r18, 0x7F	; 127
   3e3e0:	30 70       	andi	r19, 0x00	; 0
   3e3e2:	22 0f       	add	r18, r18
   3e3e4:	33 1f       	adc	r19, r19
   3e3e6:	22 0f       	add	r18, r18
   3e3e8:	33 1f       	adc	r19, r19
   3e3ea:	ce 01       	movw	r24, r28
   3e3ec:	01 96       	adiw	r24, 0x01	; 1
   3e3ee:	04 e0       	ldi	r16, 0x04	; 4
   3e3f0:	10 e0       	ldi	r17, 0x00	; 0
   3e3f2:	af d4       	rcall	.+2398   	; 0x3ed52 <disk_readp>
   3e3f4:	88 23       	and	r24, r24
   3e3f6:	31 f4       	brne	.+12     	; 0x3e404 <get_fat+0xcc>
   3e3f8:	09 81       	ldd	r16, Y+1	; 0x01
   3e3fa:	1a 81       	ldd	r17, Y+2	; 0x02
   3e3fc:	2b 81       	ldd	r18, Y+3	; 0x03
		return LD_DWORD(buf) & 0x0FFFFFFF;
   3e3fe:	3c 81       	ldd	r19, Y+4	; 0x04
   3e400:	3f 70       	andi	r19, 0x0F	; 15
   3e402:	04 c0       	rjmp	.+8      	; 0x3e40c <get_fat+0xd4>
   3e404:	01 e0       	ldi	r16, 0x01	; 1
   3e406:	10 e0       	ldi	r17, 0x00	; 0
   3e408:	20 e0       	ldi	r18, 0x00	; 0
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
   3e40a:	30 e0       	ldi	r19, 0x00	; 0
   3e40c:	b8 01       	movw	r22, r16
   3e40e:	c9 01       	movw	r24, r18
   3e410:	0f 90       	pop	r0
}
   3e412:	0f 90       	pop	r0
   3e414:	0f 90       	pop	r0
   3e416:	0f 90       	pop	r0
   3e418:	df 91       	pop	r29
   3e41a:	cf 91       	pop	r28
   3e41c:	1f 91       	pop	r17
   3e41e:	0f 91       	pop	r16
   3e420:	08 95       	ret

0003e422 <check_fs>:
   3e422:	cf 92       	push	r12
   3e424:	df 92       	push	r13
   3e426:	ef 92       	push	r14
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   3e428:	ff 92       	push	r15
   3e42a:	0f 93       	push	r16
   3e42c:	1f 93       	push	r17
   3e42e:	cf 93       	push	r28
   3e430:	df 93       	push	r29
   3e432:	ec 01       	movw	r28, r24
   3e434:	6a 01       	movw	r12, r20
   3e436:	7b 01       	movw	r14, r22
   3e438:	2e ef       	ldi	r18, 0xFE	; 254
   3e43a:	31 e0       	ldi	r19, 0x01	; 1
   3e43c:	02 e0       	ldi	r16, 0x02	; 2
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
   3e43e:	10 e0       	ldi	r17, 0x00	; 0
   3e440:	88 d4       	rcall	.+2320   	; 0x3ed52 <disk_readp>
   3e442:	88 23       	and	r24, r24
   3e444:	41 f5       	brne	.+80     	; 0x3e496 <check_fs+0x74>
   3e446:	88 81       	ld	r24, Y
   3e448:	99 81       	ldd	r25, Y+1	; 0x01
   3e44a:	2a ea       	ldi	r18, 0xAA	; 170
   3e44c:	85 35       	cpi	r24, 0x55	; 85
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
   3e44e:	92 07       	cpc	r25, r18
   3e450:	21 f5       	brne	.+72     	; 0x3e49a <check_fs+0x78>
   3e452:	ce 01       	movw	r24, r28
   3e454:	b7 01       	movw	r22, r14
   3e456:	a6 01       	movw	r20, r12
   3e458:	26 e3       	ldi	r18, 0x36	; 54
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
   3e45a:	30 e0       	ldi	r19, 0x00	; 0
   3e45c:	7a d4       	rcall	.+2292   	; 0x3ed52 <disk_readp>
   3e45e:	88 23       	and	r24, r24
   3e460:	31 f4       	brne	.+12     	; 0x3e46e <check_fs+0x4c>
   3e462:	88 81       	ld	r24, Y
   3e464:	99 81       	ldd	r25, Y+1	; 0x01
   3e466:	21 e4       	ldi	r18, 0x41	; 65
   3e468:	86 34       	cpi	r24, 0x46	; 70
   3e46a:	92 07       	cpc	r25, r18
   3e46c:	c1 f0       	breq	.+48     	; 0x3e49e <check_fs+0x7c>
   3e46e:	ce 01       	movw	r24, r28
   3e470:	b7 01       	movw	r22, r14
   3e472:	a6 01       	movw	r20, r12
   3e474:	22 e5       	ldi	r18, 0x52	; 82
   3e476:	30 e0       	ldi	r19, 0x00	; 0
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
   3e478:	02 e0       	ldi	r16, 0x02	; 2
   3e47a:	10 e0       	ldi	r17, 0x00	; 0
   3e47c:	6a d4       	rcall	.+2260   	; 0x3ed52 <disk_readp>
   3e47e:	88 23       	and	r24, r24
   3e480:	41 f4       	brne	.+16     	; 0x3e492 <check_fs+0x70>
   3e482:	81 e0       	ldi	r24, 0x01	; 1
   3e484:	28 81       	ld	r18, Y
   3e486:	39 81       	ldd	r19, Y+1	; 0x01
   3e488:	91 e4       	ldi	r25, 0x41	; 65
   3e48a:	26 34       	cpi	r18, 0x46	; 70
   3e48c:	39 07       	cpc	r19, r25
/*-----------------------------------------------------------------------*/
/* Check a sector if it is an FAT boot record                            */
/*-----------------------------------------------------------------------*/

static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
   3e48e:	41 f4       	brne	.+16     	; 0x3e4a0 <check_fs+0x7e>
   3e490:	06 c0       	rjmp	.+12     	; 0x3e49e <check_fs+0x7c>
   3e492:	81 e0       	ldi	r24, 0x01	; 1
   3e494:	05 c0       	rjmp	.+10     	; 0x3e4a0 <check_fs+0x7e>
   3e496:	83 e0       	ldi	r24, 0x03	; 3
   3e498:	03 c0       	rjmp	.+6      	; 0x3e4a0 <check_fs+0x7e>
   3e49a:	82 e0       	ldi	r24, 0x02	; 2
   3e49c:	01 c0       	rjmp	.+2      	; 0x3e4a0 <check_fs+0x7e>

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
		return 0;
	return 1;
   3e49e:	80 e0       	ldi	r24, 0x00	; 0
   3e4a0:	df 91       	pop	r29
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
		return 3;
   3e4a2:	cf 91       	pop	r28
   3e4a4:	1f 91       	pop	r17
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
		return 2;
   3e4a6:	0f 91       	pop	r16
   3e4a8:	ff 90       	pop	r15

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
   3e4aa:	ef 90       	pop	r14
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
		return 0;
	return 1;
}
   3e4ac:	df 90       	pop	r13
   3e4ae:	cf 90       	pop	r12
   3e4b0:	08 95       	ret

0003e4b2 <pf_mount>:
   3e4b2:	4f 92       	push	r4
   3e4b4:	5f 92       	push	r5
   3e4b6:	6f 92       	push	r6
   3e4b8:	7f 92       	push	r7
   3e4ba:	af 92       	push	r10
   3e4bc:	bf 92       	push	r11
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
   3e4be:	cf 92       	push	r12
   3e4c0:	df 92       	push	r13
   3e4c2:	ef 92       	push	r14
   3e4c4:	ff 92       	push	r15
   3e4c6:	0f 93       	push	r16
   3e4c8:	1f 93       	push	r17
   3e4ca:	cf 93       	push	r28
   3e4cc:	df 93       	push	r29
   3e4ce:	cd b7       	in	r28, 0x3d	; 61
   3e4d0:	de b7       	in	r29, 0x3e	; 62
   3e4d2:	a8 97       	sbiw	r28, 0x28	; 40
   3e4d4:	0f b6       	in	r0, 0x3f	; 63
   3e4d6:	f8 94       	cli
   3e4d8:	de bf       	out	0x3e, r29	; 62
   3e4da:	0f be       	out	0x3f, r0	; 63
   3e4dc:	cd bf       	out	0x3d, r28	; 61
   3e4de:	5c 01       	movw	r10, r24
   3e4e0:	10 92 15 02 	sts	0x0215, r1
   3e4e4:	10 92 14 02 	sts	0x0214, r1
   3e4e8:	00 97       	sbiw	r24, 0x00	; 0
   3e4ea:	09 f4       	brne	.+2      	; 0x3e4ee <pf_mount+0x3c>
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
   3e4ec:	e2 c0       	rjmp	.+452    	; 0x3e6b2 <pf_mount+0x200>
   3e4ee:	8b d3       	rcall	.+1814   	; 0x3ec06 <disk_initialize>
   3e4f0:	80 fd       	sbrc	r24, 0
   3e4f2:	e1 c0       	rjmp	.+450    	; 0x3e6b6 <pf_mount+0x204>
	if (!fs) return FR_OK;				/* Unregister fs object */
   3e4f4:	ce 01       	movw	r24, r28
   3e4f6:	01 96       	adiw	r24, 0x01	; 1
   3e4f8:	40 e0       	ldi	r20, 0x00	; 0

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
   3e4fa:	50 e0       	ldi	r21, 0x00	; 0
   3e4fc:	ba 01       	movw	r22, r20
   3e4fe:	91 df       	rcall	.-222    	; 0x3e422 <check_fs>
   3e500:	81 30       	cpi	r24, 0x01	; 1
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
   3e502:	d9 f4       	brne	.+54     	; 0x3e53a <pf_mount+0x88>
   3e504:	ce 01       	movw	r24, r28
   3e506:	01 96       	adiw	r24, 0x01	; 1
   3e508:	40 e0       	ldi	r20, 0x00	; 0
   3e50a:	50 e0       	ldi	r21, 0x00	; 0
   3e50c:	ba 01       	movw	r22, r20
   3e50e:	2e eb       	ldi	r18, 0xBE	; 190
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
   3e510:	31 e0       	ldi	r19, 0x01	; 1
   3e512:	00 e1       	ldi	r16, 0x10	; 16
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
   3e514:	10 e0       	ldi	r17, 0x00	; 0
   3e516:	1d d4       	rcall	.+2106   	; 0x3ed52 <disk_readp>
   3e518:	88 23       	and	r24, r24
   3e51a:	09 f0       	breq	.+2      	; 0x3e51e <pf_mount+0x6c>
   3e51c:	ce c0       	rjmp	.+412    	; 0x3e6ba <pf_mount+0x208>
   3e51e:	8d 81       	ldd	r24, Y+5	; 0x05
   3e520:	88 23       	and	r24, r24
   3e522:	09 f4       	brne	.+2      	; 0x3e526 <pf_mount+0x74>
   3e524:	cc c0       	rjmp	.+408    	; 0x3e6be <pf_mount+0x20c>
   3e526:	c9 84       	ldd	r12, Y+9	; 0x09
   3e528:	da 84       	ldd	r13, Y+10	; 0x0a
   3e52a:	eb 84       	ldd	r14, Y+11	; 0x0b
   3e52c:	fc 84       	ldd	r15, Y+12	; 0x0c
   3e52e:	ce 01       	movw	r24, r28
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
   3e530:	01 96       	adiw	r24, 0x01	; 1
   3e532:	b7 01       	movw	r22, r14
   3e534:	a6 01       	movw	r20, r12
   3e536:	75 df       	rcall	.-278    	; 0x3e422 <check_fs>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
   3e538:	03 c0       	rjmp	.+6      	; 0x3e540 <pf_mount+0x8e>
   3e53a:	cc 24       	eor	r12, r12
   3e53c:	dd 24       	eor	r13, r13
   3e53e:	76 01       	movw	r14, r12
				fmt = check_fs(buf, bsect);	/* Check the partition */
   3e540:	83 30       	cpi	r24, 0x03	; 3
   3e542:	09 f4       	brne	.+2      	; 0x3e546 <pf_mount+0x94>
   3e544:	ba c0       	rjmp	.+372    	; 0x3e6ba <pf_mount+0x208>
   3e546:	88 23       	and	r24, r24
   3e548:	09 f0       	breq	.+2      	; 0x3e54c <pf_mount+0x9a>
   3e54a:	b9 c0       	rjmp	.+370    	; 0x3e6be <pf_mount+0x20c>
   3e54c:	ce 01       	movw	r24, r28

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
   3e54e:	01 96       	adiw	r24, 0x01	; 1
   3e550:	b7 01       	movw	r22, r14
   3e552:	a6 01       	movw	r20, r12
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   3e554:	2d e0       	ldi	r18, 0x0D	; 13
   3e556:	30 e0       	ldi	r19, 0x00	; 0
   3e558:	04 e2       	ldi	r16, 0x24	; 36
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
   3e55a:	10 e0       	ldi	r17, 0x00	; 0
   3e55c:	fa d3       	rcall	.+2036   	; 0x3ed52 <disk_readp>
   3e55e:	88 23       	and	r24, r24

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
   3e560:	09 f0       	breq	.+2      	; 0x3e564 <pf_mount+0xb2>
   3e562:	ab c0       	rjmp	.+342    	; 0x3e6ba <pf_mount+0x208>
   3e564:	6a 85       	ldd	r22, Y+10	; 0x0a
   3e566:	7b 85       	ldd	r23, Y+11	; 0x0b
   3e568:	80 e0       	ldi	r24, 0x00	; 0
   3e56a:	90 e0       	ldi	r25, 0x00	; 0
   3e56c:	61 15       	cp	r22, r1
   3e56e:	71 05       	cpc	r23, r1
   3e570:	81 05       	cpc	r24, r1
   3e572:	91 05       	cpc	r25, r1
   3e574:	21 f4       	brne	.+8      	; 0x3e57e <pf_mount+0xcc>
   3e576:	68 8d       	ldd	r22, Y+24	; 0x18
   3e578:	79 8d       	ldd	r23, Y+25	; 0x19

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
   3e57a:	8a 8d       	ldd	r24, Y+26	; 0x1a
   3e57c:	9b 8d       	ldd	r25, Y+27	; 0x1b
   3e57e:	2c 81       	ldd	r18, Y+4	; 0x04
   3e580:	30 e0       	ldi	r19, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
   3e582:	40 e0       	ldi	r20, 0x00	; 0
   3e584:	50 e0       	ldi	r21, 0x00	; 0
   3e586:	0f 94 62 fb 	call	0x3f6c4	; 0x3f6c4 <__mulsi3>
   3e58a:	6d a3       	lds	r22, 0x5d
   3e58c:	7e a3       	lds	r23, 0x5e
   3e58e:	8f a3       	lds	r24, 0x5f
   3e590:	98 a7       	lds	r25, 0x78
   3e592:	4a 81       	ldd	r20, Y+2	; 0x02

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
   3e594:	5b 81       	ldd	r21, Y+3	; 0x03
   3e596:	60 e0       	ldi	r22, 0x00	; 0
   3e598:	70 e0       	ldi	r23, 0x00	; 0
   3e59a:	26 01       	movw	r4, r12
   3e59c:	37 01       	movw	r6, r14
   3e59e:	44 0e       	add	r4, r20
   3e5a0:	55 1e       	adc	r5, r21
   3e5a2:	66 1e       	adc	r6, r22
   3e5a4:	77 1e       	adc	r7, r23
   3e5a6:	d5 01       	movw	r26, r10
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
   3e5a8:	1a 96       	adiw	r26, 0x0a	; 10
   3e5aa:	4d 92       	st	X+, r4
   3e5ac:	5d 92       	st	X+, r5
   3e5ae:	6d 92       	st	X+, r6
   3e5b0:	7c 92       	st	X, r7
   3e5b2:	1d 97       	sbiw	r26, 0x0d	; 13
   3e5b4:	29 81       	ldd	r18, Y+1	; 0x01
   3e5b6:	12 96       	adiw	r26, 0x02	; 2
   3e5b8:	2c 93       	st	X, r18
   3e5ba:	12 97       	sbiw	r26, 0x02	; 2
   3e5bc:	cd 80       	ldd	r12, Y+5	; 0x05
   3e5be:	de 80       	ldd	r13, Y+6	; 0x06
   3e5c0:	15 96       	adiw	r26, 0x05	; 5
   3e5c2:	dc 92       	st	X, r13
   3e5c4:	ce 92       	st	-X, r12
   3e5c6:	14 97       	sbiw	r26, 0x04	; 4
   3e5c8:	8f 81       	ldd	r24, Y+7	; 0x07
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
   3e5ca:	98 85       	ldd	r25, Y+8	; 0x08
   3e5cc:	a0 e0       	ldi	r26, 0x00	; 0
   3e5ce:	b0 e0       	ldi	r27, 0x00	; 0
   3e5d0:	00 97       	sbiw	r24, 0x00	; 0
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
   3e5d2:	a1 05       	cpc	r26, r1
   3e5d4:	b1 05       	cpc	r27, r1
   3e5d6:	21 f4       	brne	.+8      	; 0x3e5e0 <pf_mount+0x12e>
   3e5d8:	8c 89       	ldd	r24, Y+20	; 0x14
   3e5da:	9d 89       	ldd	r25, Y+21	; 0x15
   3e5dc:	ae 89       	ldd	r26, Y+22	; 0x16
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
   3e5de:	bf 89       	ldd	r27, Y+23	; 0x17
   3e5e0:	34 e0       	ldi	r19, 0x04	; 4
   3e5e2:	d6 94       	lsr	r13
   3e5e4:	c7 94       	ror	r12
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
   3e5e6:	3a 95       	dec	r19
   3e5e8:	e1 f7       	brne	.-8      	; 0x3e5e2 <pf_mount+0x130>
   3e5ea:	ee 24       	eor	r14, r14
   3e5ec:	ff 24       	eor	r15, r15
   3e5ee:	84 1b       	sub	r24, r20
   3e5f0:	95 0b       	sbc	r25, r21
   3e5f2:	a6 0b       	sbc	r26, r22
   3e5f4:	b7 0b       	sbc	r27, r23
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
   3e5f6:	4d a1       	lds	r20, 0x4d
   3e5f8:	5e a1       	lds	r21, 0x4e
   3e5fa:	6f a1       	lds	r22, 0x4f
   3e5fc:	78 a5       	lds	r23, 0x68
   3e5fe:	84 1b       	sub	r24, r20
   3e600:	95 0b       	sbc	r25, r21
   3e602:	a6 0b       	sbc	r26, r22
   3e604:	b7 0b       	sbc	r27, r23
   3e606:	8c 19       	sub	r24, r12
   3e608:	9d 09       	sbc	r25, r13
   3e60a:	ae 09       	sbc	r26, r14
   3e60c:	bf 09       	sbc	r27, r15
   3e60e:	30 e0       	ldi	r19, 0x00	; 0
   3e610:	40 e0       	ldi	r20, 0x00	; 0
   3e612:	50 e0       	ldi	r21, 0x00	; 0
   3e614:	bc 01       	movw	r22, r24
   3e616:	cd 01       	movw	r24, r26
   3e618:	0f 94 94 fb 	call	0x3f728	; 0x3f728 <__udivmodsi4>
   3e61c:	89 01       	movw	r16, r18
   3e61e:	9a 01       	movw	r18, r20
   3e620:	0e 5f       	subi	r16, 0xFE	; 254
   3e622:	1f 4f       	sbci	r17, 0xFF	; 255
		) / fs->csize + 2;
   3e624:	2f 4f       	sbci	r18, 0xFF	; 255
   3e626:	3f 4f       	sbci	r19, 0xFF	; 255
   3e628:	d5 01       	movw	r26, r10
   3e62a:	16 96       	adiw	r26, 0x06	; 6
   3e62c:	0d 93       	st	X+, r16
   3e62e:	1d 93       	st	X+, r17
   3e630:	2d 93       	st	X+, r18
   3e632:	3c 93       	st	X, r19
   3e634:	19 97       	sbiw	r26, 0x09	; 9
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
   3e636:	07 3f       	cpi	r16, 0xF7	; 247
   3e638:	bf e0       	ldi	r27, 0x0F	; 15
   3e63a:	1b 07       	cpc	r17, r27
   3e63c:	b0 e0       	ldi	r27, 0x00	; 0
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
   3e63e:	2b 07       	cpc	r18, r27
   3e640:	b0 e0       	ldi	r27, 0x00	; 0
   3e642:	3b 07       	cpc	r19, r27
   3e644:	e0 f1       	brcs	.+120    	; 0x3e6be <pf_mount+0x20c>
   3e646:	07 3f       	cpi	r16, 0xF7	; 247
   3e648:	ef ef       	ldi	r30, 0xFF	; 255
   3e64a:	1e 07       	cpc	r17, r30

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
   3e64c:	e0 e0       	ldi	r30, 0x00	; 0
   3e64e:	2e 07       	cpc	r18, r30
   3e650:	e0 e0       	ldi	r30, 0x00	; 0
   3e652:	3e 07       	cpc	r19, r30
   3e654:	10 f4       	brcc	.+4      	; 0x3e65a <pf_mount+0x1a8>
   3e656:	82 e0       	ldi	r24, 0x02	; 2
   3e658:	01 c0       	rjmp	.+2      	; 0x3e65c <pf_mount+0x1aa>
   3e65a:	83 e0       	ldi	r24, 0x03	; 3
#if _FS_FAT12
		fmt = FS_FAT12;
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
   3e65c:	d5 01       	movw	r26, r10
   3e65e:	8c 93       	st	X, r24
   3e660:	83 30       	cpi	r24, 0x03	; 3
   3e662:	29 f4       	brne	.+10     	; 0x3e66e <pf_mount+0x1bc>
   3e664:	88 a1       	lds	r24, 0x48
   3e666:	99 a1       	lds	r25, 0x49
   3e668:	aa a1       	lds	r26, 0x4a
   3e66a:	bb a1       	lds	r27, 0x4b
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;

	fmt = FS_FAT16;							/* Determine the FAT sub type */
   3e66c:	08 c0       	rjmp	.+16     	; 0x3e67e <pf_mount+0x1cc>
   3e66e:	8d a1       	lds	r24, 0x4d
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
#if _FS_FAT32
		fmt = FS_FAT32;
   3e670:	9e a1       	lds	r25, 0x4e
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
   3e672:	af a1       	lds	r26, 0x4f
   3e674:	b8 a5       	lds	r27, 0x68
	if (_FS_FAT32 && fmt == FS_FAT32)
   3e676:	84 0d       	add	r24, r4
   3e678:	95 1d       	adc	r25, r5
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
   3e67a:	a6 1d       	adc	r26, r6
   3e67c:	b7 1d       	adc	r27, r7
   3e67e:	f5 01       	movw	r30, r10
   3e680:	86 87       	std	Z+14, r24	; 0x0e
   3e682:	97 87       	std	Z+15, r25	; 0x0f
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
   3e684:	a0 8b       	std	Z+16, r26	; 0x10
   3e686:	b1 8b       	std	Z+17, r27	; 0x11
   3e688:	c4 0c       	add	r12, r4
   3e68a:	d5 1c       	adc	r13, r5
   3e68c:	e6 1c       	adc	r14, r6
   3e68e:	f7 1c       	adc	r15, r7
   3e690:	4d a1       	lds	r20, 0x4d
   3e692:	5e a1       	lds	r21, 0x4e
   3e694:	6f a1       	lds	r22, 0x4f
   3e696:	78 a5       	lds	r23, 0x68
   3e698:	c4 0e       	add	r12, r20
   3e69a:	d5 1e       	adc	r13, r21
   3e69c:	e6 1e       	adc	r14, r22
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
   3e69e:	f7 1e       	adc	r15, r23
   3e6a0:	c2 8a       	std	Z+18, r12	; 0x12
   3e6a2:	d3 8a       	std	Z+19, r13	; 0x13
   3e6a4:	e4 8a       	std	Z+20, r14	; 0x14
   3e6a6:	f5 8a       	std	Z+21, r15	; 0x15
   3e6a8:	11 82       	std	Z+1, r1	; 0x01
   3e6aa:	b0 92 15 02 	sts	0x0215, r11
   3e6ae:	a0 92 14 02 	sts	0x0214, r10
   3e6b2:	80 e0       	ldi	r24, 0x00	; 0
   3e6b4:	05 c0       	rjmp	.+10     	; 0x3e6c0 <pf_mount+0x20e>
   3e6b6:	82 e0       	ldi	r24, 0x02	; 2
   3e6b8:	03 c0       	rjmp	.+6      	; 0x3e6c0 <pf_mount+0x20e>
   3e6ba:	81 e0       	ldi	r24, 0x01	; 1
   3e6bc:	01 c0       	rjmp	.+2      	; 0x3e6c0 <pf_mount+0x20e>

	fs->flag = 0;
   3e6be:	87 e0       	ldi	r24, 0x07	; 7
	FatFs = fs;
   3e6c0:	a8 96       	adiw	r28, 0x28	; 40
   3e6c2:	0f b6       	in	r0, 0x3f	; 63
   3e6c4:	f8 94       	cli
   3e6c6:	de bf       	out	0x3e, r29	; 62
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
	if (!fs) return FR_OK;				/* Unregister fs object */
   3e6c8:	0f be       	out	0x3f, r0	; 63
   3e6ca:	cd bf       	out	0x3d, r28	; 61

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;
   3e6cc:	df 91       	pop	r29
   3e6ce:	cf 91       	pop	r28
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
   3e6d0:	1f 91       	pop	r17
   3e6d2:	0f 91       	pop	r16
	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
#if _FS_FAT12
		fmt = FS_FAT12;
#else
		return FR_NO_FILESYSTEM;
   3e6d4:	ff 90       	pop	r15

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
}
   3e6d6:	ef 90       	pop	r14
   3e6d8:	df 90       	pop	r13
   3e6da:	cf 90       	pop	r12
   3e6dc:	bf 90       	pop	r11
   3e6de:	af 90       	pop	r10
   3e6e0:	7f 90       	pop	r7
   3e6e2:	6f 90       	pop	r6
   3e6e4:	5f 90       	pop	r5
   3e6e6:	4f 90       	pop	r4
   3e6e8:	08 95       	ret

0003e6ea <pf_open>:
   3e6ea:	8f 92       	push	r8
   3e6ec:	9f 92       	push	r9
   3e6ee:	af 92       	push	r10
   3e6f0:	bf 92       	push	r11
   3e6f2:	cf 92       	push	r12
   3e6f4:	df 92       	push	r13
   3e6f6:	ef 92       	push	r14
   3e6f8:	ff 92       	push	r15
   3e6fa:	0f 93       	push	r16
   3e6fc:	1f 93       	push	r17
   3e6fe:	cf 93       	push	r28
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
   3e700:	df 93       	push	r29
   3e702:	cd b7       	in	r28, 0x3d	; 61
   3e704:	de b7       	in	r29, 0x3e	; 62
   3e706:	ec 97       	sbiw	r28, 0x3c	; 60
   3e708:	0f b6       	in	r0, 0x3f	; 63
   3e70a:	f8 94       	cli
   3e70c:	de bf       	out	0x3e, r29	; 62
   3e70e:	0f be       	out	0x3f, r0	; 63
   3e710:	cd bf       	out	0x3d, r28	; 61
   3e712:	80 90 14 02 	lds	r8, 0x0214
   3e716:	90 90 15 02 	lds	r9, 0x0215
   3e71a:	81 14       	cp	r8, r1
   3e71c:	91 04       	cpc	r9, r1
   3e71e:	09 f4       	brne	.+2      	; 0x3e722 <pf_open+0x38>
   3e720:	3c c1       	rjmp	.+632    	; 0x3e99a <pf_open+0x2b0>
   3e722:	f4 01       	movw	r30, r8
   3e724:	11 82       	std	Z+1, r1	; 0x01
   3e726:	9e 01       	movw	r18, r28
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
   3e728:	2f 5f       	subi	r18, 0xFF	; 255
   3e72a:	3f 4f       	sbci	r19, 0xFF	; 255
   3e72c:	38 8b       	std	Y+16, r19	; 0x10
   3e72e:	2f 87       	std	Y+15, r18	; 0x0f


	if (!fs)						/* Check file system */
   3e730:	9c 01       	movw	r18, r24
   3e732:	59 01       	movw	r10, r18
   3e734:	f9 01       	movw	r30, r18
   3e736:	80 81       	ld	r24, Z
		return FR_NOT_ENABLED;

	fs->flag = 0;
   3e738:	2f 5f       	subi	r18, 0xFF	; 255
   3e73a:	3f 4f       	sbci	r19, 0xFF	; 255
	dj.fn = sp;
   3e73c:	80 32       	cpi	r24, 0x20	; 32
   3e73e:	c9 f3       	breq	.-14     	; 0x3e732 <pf_open+0x48>
   3e740:	8f 32       	cpi	r24, 0x2F	; 47
   3e742:	09 f4       	brne	.+2      	; 0x3e746 <pf_open+0x5c>
   3e744:	59 01       	movw	r10, r18
   3e746:	19 8a       	std	Y+17, r1	; 0x11
   3e748:	1a 8a       	std	Y+18, r1	; 0x12
)
{
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
   3e74a:	1b 8a       	std	Y+19, r1	; 0x13
   3e74c:	1c 8a       	std	Y+20, r1	; 0x14
   3e74e:	f5 01       	movw	r30, r10
   3e750:	80 81       	ld	r24, Z
   3e752:	81 32       	cpi	r24, 0x21	; 33
   3e754:	40 f4       	brcc	.+16     	; 0x3e766 <pf_open+0x7c>
	if (*path == '/') path++;			/* Strip heading separator */
   3e756:	ce 01       	movw	r24, r28
   3e758:	0d 96       	adiw	r24, 0x0d	; 13
   3e75a:	ac dd       	rcall	.-1192   	; 0x3e2b4 <dir_rewind>
	dj->sclust = 0;						/* Set start directory (always root dir) */
   3e75c:	1d 8e       	std	Y+29, r1	; 0x1d
   3e75e:	88 23       	and	r24, r24
   3e760:	09 f4       	brne	.+2      	; 0x3e764 <pf_open+0x7a>
   3e762:	f1 c0       	rjmp	.+482    	; 0x3e946 <pf_open+0x25c>

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
   3e764:	1d c1       	rjmp	.+570    	; 0x3e9a0 <pf_open+0x2b6>
   3e766:	10 e2       	ldi	r17, 0x20	; 32
   3e768:	e1 2e       	mov	r14, r17
   3e76a:	ef 85       	ldd	r30, Y+15	; 0x0f
		res = dir_rewind(dj);
   3e76c:	f8 89       	ldd	r31, Y+16	; 0x10
   3e76e:	df 01       	movw	r26, r30
   3e770:	8b e0       	ldi	r24, 0x0B	; 11
   3e772:	90 e0       	ldi	r25, 0x00	; 0
		dir[0] = 0;
   3e774:	01 c0       	rjmp	.+2      	; 0x3e778 <pf_open+0x8e>
		return FR_NOT_ENABLED;

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
   3e776:	ed 92       	st	X+, r14
   3e778:	01 97       	sbiw	r24, 0x01	; 1
   3e77a:	2f ef       	ldi	r18, 0xFF	; 255
   3e77c:	8f 3f       	cpi	r24, 0xFF	; 255

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
   3e77e:	92 07       	cpc	r25, r18
   3e780:	d1 f7       	brne	.-12     	; 0x3e776 <pf_open+0x8c>
	return FR_OK;

fr_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
   3e782:	90 e0       	ldi	r25, 0x00	; 0
   3e784:	ff 24       	eor	r15, r15


/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
   3e786:	28 e0       	ldi	r18, 0x08	; 8
	return FR_OK;

fr_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
   3e788:	d5 01       	movw	r26, r10
   3e78a:	af 0d       	add	r26, r15
   3e78c:	b1 1d       	adc	r27, r1

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
   3e78e:	8c 91       	ld	r24, X
   3e790:	f3 94       	inc	r15
   3e792:	81 32       	cpi	r24, 0x21	; 33
   3e794:	c0 f0       	brcs	.+48     	; 0x3e7c6 <pf_open+0xdc>
   3e796:	8f 32       	cpi	r24, 0x2F	; 47
   3e798:	b1 f0       	breq	.+44     	; 0x3e7c6 <pf_open+0xdc>
   3e79a:	8e 32       	cpi	r24, 0x2E	; 46
   3e79c:	11 f0       	breq	.+4      	; 0x3e7a2 <pf_open+0xb8>
   3e79e:	92 17       	cp	r25, r18
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
   3e7a0:	38 f0       	brcs	.+14     	; 0x3e7b0 <pf_open+0xc6>
   3e7a2:	28 30       	cpi	r18, 0x08	; 8
   3e7a4:	81 f4       	brne	.+32     	; 0x3e7c6 <pf_open+0xdc>
   3e7a6:	8e 32       	cpi	r24, 0x2E	; 46
   3e7a8:	71 f4       	brne	.+28     	; 0x3e7c6 <pf_open+0xdc>
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
   3e7aa:	98 e0       	ldi	r25, 0x08	; 8
   3e7ac:	2b e0       	ldi	r18, 0x0B	; 11
   3e7ae:	ec cf       	rjmp	.-40     	; 0x3e788 <pf_open+0x9e>
   3e7b0:	38 2f       	mov	r19, r24
		if (c == '.' || i >= ni) {
   3e7b2:	31 56       	subi	r19, 0x61	; 97
   3e7b4:	3a 31       	cpi	r19, 0x1A	; 26
   3e7b6:	08 f4       	brcc	.+2      	; 0x3e7ba <pf_open+0xd0>
   3e7b8:	80 52       	subi	r24, 0x20	; 32
			if (ni != 8 || c != '.') break;
   3e7ba:	df 01       	movw	r26, r30
   3e7bc:	a9 0f       	add	r26, r25
   3e7be:	b1 1d       	adc	r27, r1
   3e7c0:	8c 93       	st	X, r24
			i = 8; ni = 11;
   3e7c2:	9f 5f       	subi	r25, 0xFF	; 255
   3e7c4:	e1 cf       	rjmp	.-62     	; 0x3e788 <pf_open+0x9e>
   3e7c6:	91 e0       	ldi	r25, 0x01	; 1
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
   3e7c8:	81 32       	cpi	r24, 0x21	; 33
   3e7ca:	08 f0       	brcs	.+2      	; 0x3e7ce <pf_open+0xe4>
   3e7cc:	90 e0       	ldi	r25, 0x00	; 0
   3e7ce:	93 87       	std	Z+11, r25	; 0x0b
   3e7d0:	ce 01       	movw	r24, r28
			sfn[i++] = c;
   3e7d2:	0d 96       	adiw	r24, 0x0d	; 13
   3e7d4:	6f dd       	rcall	.-1314   	; 0x3e2b4 <dir_rewind>
   3e7d6:	88 23       	and	r24, r24
   3e7d8:	09 f0       	breq	.+2      	; 0x3e7dc <pf_open+0xf2>
   3e7da:	93 c0       	rjmp	.+294    	; 0x3e902 <pf_open+0x218>
   3e7dc:	49 8d       	ldd	r20, Y+25	; 0x19
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
   3e7de:	5a 8d       	ldd	r21, Y+26	; 0x1a
   3e7e0:	6b 8d       	ldd	r22, Y+27	; 0x1b
   3e7e2:	7c 8d       	ldd	r23, Y+28	; 0x1c
   3e7e4:	2d 85       	ldd	r18, Y+13	; 0x0d
   3e7e6:	3e 85       	ldd	r19, Y+14	; 0x0e
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
   3e7e8:	2f 70       	andi	r18, 0x0F	; 15
   3e7ea:	30 70       	andi	r19, 0x00	; 0
   3e7ec:	b5 e0       	ldi	r27, 0x05	; 5
   3e7ee:	22 0f       	add	r18, r18
	if (res != FR_OK) return res;
   3e7f0:	33 1f       	adc	r19, r19
   3e7f2:	ba 95       	dec	r27
   3e7f4:	e1 f7       	brne	.-8      	; 0x3e7ee <pf_open+0x104>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
   3e7f6:	ce 01       	movw	r24, r28
   3e7f8:	4d 96       	adiw	r24, 0x1d	; 29
   3e7fa:	00 e2       	ldi	r16, 0x20	; 32
   3e7fc:	10 e0       	ldi	r17, 0x00	; 0
   3e7fe:	a9 d2       	rcall	.+1362   	; 0x3ed52 <disk_readp>
   3e800:	88 23       	and	r24, r24
   3e802:	09 f0       	breq	.+2      	; 0x3e806 <pf_open+0x11c>
   3e804:	e7 c0       	rjmp	.+462    	; 0x3e9d4 <pf_open+0x2ea>
   3e806:	8d 8d       	ldd	r24, Y+29	; 0x1d
   3e808:	88 23       	and	r24, r24
   3e80a:	09 f4       	brne	.+2      	; 0x3e80e <pf_open+0x124>
   3e80c:	7d c0       	rjmp	.+250    	; 0x3e908 <pf_open+0x21e>
   3e80e:	48 a5       	lds	r20, 0x68
   3e810:	43 fd       	sbrc	r20, 3
   3e812:	14 c0       	rjmp	.+40     	; 0x3e83c <pf_open+0x152>
   3e814:	af 85       	ldd	r26, Y+15	; 0x0f
   3e816:	b8 89       	ldd	r27, Y+16	; 0x10
   3e818:	9e 01       	movw	r18, r28
   3e81a:	23 5e       	subi	r18, 0xE3	; 227
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
   3e81c:	3f 4f       	sbci	r19, 0xFF	; 255
   3e81e:	cd 01       	movw	r24, r26
   3e820:	0b 96       	adiw	r24, 0x0b	; 11
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   3e822:	8d 01       	movw	r16, r26
   3e824:	08 17       	cp	r16, r24
   3e826:	19 07       	cpc	r17, r25
   3e828:	09 f4       	brne	.+2      	; 0x3e82c <pf_open+0x142>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
   3e82a:	cd c0       	rjmp	.+410    	; 0x3e9c6 <pf_open+0x2dc>
   3e82c:	f9 01       	movw	r30, r18
   3e82e:	61 91       	ld	r22, Z+
   3e830:	9f 01       	movw	r18, r30
   3e832:	f8 01       	movw	r30, r16
	if (!fs)						/* Check file system */
		return FR_NOT_ENABLED;

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
   3e834:	51 91       	ld	r21, Z+
   3e836:	8f 01       	movw	r16, r30
   3e838:	65 17       	cp	r22, r21

/*-----------------------------------------------------------------------*/
/* Open or Create a File                                                 */
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
   3e83a:	a1 f3       	breq	.-24     	; 0x3e824 <pf_open+0x13a>
   3e83c:	c0 90 14 02 	lds	r12, 0x0214
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   3e840:	d0 90 15 02 	lds	r13, 0x0215
   3e844:	0d 85       	ldd	r16, Y+13	; 0x0d
   3e846:	1e 85       	ldd	r17, Y+14	; 0x0e
   3e848:	0f 5f       	subi	r16, 0xFF	; 255
   3e84a:	1f 4f       	sbci	r17, 0xFF	; 255
   3e84c:	09 f4       	brne	.+2      	; 0x3e850 <pf_open+0x166>
   3e84e:	5c c0       	rjmp	.+184    	; 0x3e908 <pf_open+0x21e>
   3e850:	89 8d       	ldd	r24, Y+25	; 0x19
   3e852:	9a 8d       	ldd	r25, Y+26	; 0x1a
   3e854:	ab 8d       	ldd	r26, Y+27	; 0x1b
   3e856:	bc 8d       	ldd	r27, Y+28	; 0x1c
	DIR *dj			/* Pointer to directory object */
)
{
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
   3e858:	00 97       	sbiw	r24, 0x00	; 0
   3e85a:	a1 05       	cpc	r26, r1
   3e85c:	b1 05       	cpc	r27, r1
   3e85e:	09 f4       	brne	.+2      	; 0x3e862 <pf_open+0x178>


	i = dj->index + 1;
   3e860:	53 c0       	rjmp	.+166    	; 0x3e908 <pf_open+0x21e>
   3e862:	98 01       	movw	r18, r16
   3e864:	2f 70       	andi	r18, 0x0F	; 15
   3e866:	30 70       	andi	r19, 0x00	; 0
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   3e868:	21 15       	cp	r18, r1
   3e86a:	31 05       	cpc	r19, r1
   3e86c:	09 f0       	breq	.+2      	; 0x3e870 <pf_open+0x186>
   3e86e:	46 c0       	rjmp	.+140    	; 0x3e8fc <pf_open+0x212>
   3e870:	01 96       	adiw	r24, 0x01	; 1
   3e872:	a1 1d       	adc	r26, r1
   3e874:	b1 1d       	adc	r27, r1
   3e876:	89 8f       	std	Y+25, r24	; 0x19
   3e878:	9a 8f       	std	Y+26, r25	; 0x1a
   3e87a:	ab 8f       	std	Y+27, r26	; 0x1b
   3e87c:	bc 8f       	std	Y+28, r27	; 0x1c
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
   3e87e:	4d 89       	ldd	r20, Y+21	; 0x15
   3e880:	5e 89       	ldd	r21, Y+22	; 0x16
   3e882:	6f 89       	ldd	r22, Y+23	; 0x17
   3e884:	78 8d       	ldd	r23, Y+24	; 0x18
   3e886:	f6 01       	movw	r30, r12
   3e888:	41 15       	cp	r20, r1
   3e88a:	51 05       	cpc	r21, r1
		dj->sect++;			/* Next sector */
   3e88c:	61 05       	cpc	r22, r1
   3e88e:	71 05       	cpc	r23, r1
   3e890:	31 f4       	brne	.+12     	; 0x3e89e <pf_open+0x1b4>
   3e892:	84 81       	ldd	r24, Z+4	; 0x04
   3e894:	95 81       	ldd	r25, Z+5	; 0x05
   3e896:	08 17       	cp	r16, r24
   3e898:	19 07       	cpc	r17, r25

		if (dj->clust == 0) {	/* Static table */
   3e89a:	b0 f5       	brcc	.+108    	; 0x3e908 <pf_open+0x21e>
   3e89c:	2f c0       	rjmp	.+94     	; 0x3e8fc <pf_open+0x212>
   3e89e:	82 81       	ldd	r24, Z+2	; 0x02
   3e8a0:	90 e0       	ldi	r25, 0x00	; 0
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
   3e8a2:	01 97       	sbiw	r24, 0x01	; 1
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
   3e8a4:	98 01       	movw	r18, r16
   3e8a6:	a4 e0       	ldi	r26, 0x04	; 4
   3e8a8:	36 95       	lsr	r19
   3e8aa:	27 95       	ror	r18
   3e8ac:	aa 95       	dec	r26
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
   3e8ae:	e1 f7       	brne	.-8      	; 0x3e8a8 <pf_open+0x1be>
   3e8b0:	82 23       	and	r24, r18
   3e8b2:	93 23       	and	r25, r19
   3e8b4:	00 97       	sbiw	r24, 0x00	; 0
   3e8b6:	11 f5       	brne	.+68     	; 0x3e8fc <pf_open+0x212>
   3e8b8:	cb 01       	movw	r24, r22
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
   3e8ba:	ba 01       	movw	r22, r20
   3e8bc:	3d dd       	rcall	.-1414   	; 0x3e338 <get_fat>
   3e8be:	ab 01       	movw	r20, r22
   3e8c0:	bc 01       	movw	r22, r24
   3e8c2:	42 30       	cpi	r20, 0x02	; 2
   3e8c4:	51 05       	cpc	r21, r1
   3e8c6:	61 05       	cpc	r22, r1
   3e8c8:	71 05       	cpc	r23, r1
   3e8ca:	08 f4       	brcc	.+2      	; 0x3e8ce <pf_open+0x1e4>
   3e8cc:	83 c0       	rjmp	.+262    	; 0x3e9d4 <pf_open+0x2ea>
   3e8ce:	f6 01       	movw	r30, r12
   3e8d0:	86 81       	ldd	r24, Z+6	; 0x06
   3e8d2:	97 81       	ldd	r25, Z+7	; 0x07
				clst = get_fat(dj->clust);		/* Get next cluster */
   3e8d4:	a0 85       	ldd	r26, Z+8	; 0x08
   3e8d6:	b1 85       	ldd	r27, Z+9	; 0x09
   3e8d8:	48 17       	cp	r20, r24
   3e8da:	59 07       	cpc	r21, r25
   3e8dc:	6a 07       	cpc	r22, r26
   3e8de:	7b 07       	cpc	r23, r27
				if (clst <= 1) return FR_DISK_ERR;
   3e8e0:	98 f4       	brcc	.+38     	; 0x3e908 <pf_open+0x21e>
   3e8e2:	4d 8b       	std	Y+21, r20	; 0x15
   3e8e4:	5e 8b       	std	Y+22, r21	; 0x16
   3e8e6:	6f 8b       	std	Y+23, r22	; 0x17
   3e8e8:	78 8f       	std	Y+24, r23	; 0x18
   3e8ea:	cb 01       	movw	r24, r22
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
   3e8ec:	ba 01       	movw	r22, r20
   3e8ee:	ae dc       	rcall	.-1700   	; 0x3e24c <clust2sect>
   3e8f0:	dc 01       	movw	r26, r24
   3e8f2:	cb 01       	movw	r24, r22
   3e8f4:	89 8f       	std	Y+25, r24	; 0x19
   3e8f6:	9a 8f       	std	Y+26, r25	; 0x1a
   3e8f8:	ab 8f       	std	Y+27, r26	; 0x1b
   3e8fa:	bc 8f       	std	Y+28, r27	; 0x1c
   3e8fc:	1e 87       	std	Y+14, r17	; 0x0e
   3e8fe:	0d 87       	std	Y+13, r16	; 0x0d
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
   3e900:	6d cf       	rjmp	.-294    	; 0x3e7dc <pf_open+0xf2>
   3e902:	83 30       	cpi	r24, 0x03	; 3
   3e904:	09 f0       	breq	.+2      	; 0x3e908 <pf_open+0x21e>
   3e906:	4c c0       	rjmp	.+152    	; 0x3e9a0 <pf_open+0x2b6>
				dj->sect = clust2sect(clst);
   3e908:	ef 85       	ldd	r30, Y+15	; 0x0f
   3e90a:	f8 89       	ldd	r31, Y+16	; 0x10
   3e90c:	83 85       	ldd	r24, Z+11	; 0x0b
   3e90e:	88 23       	and	r24, r24
   3e910:	09 f4       	brne	.+2      	; 0x3e914 <pf_open+0x22a>
   3e912:	62 c0       	rjmp	.+196    	; 0x3e9d8 <pf_open+0x2ee>
   3e914:	44 c0       	rjmp	.+136    	; 0x3e99e <pf_open+0x2b4>
   3e916:	44 ff       	sbrs	r20, 4
   3e918:	5f c0       	rjmp	.+190    	; 0x3e9d8 <pf_open+0x2ee>
   3e91a:	af 0c       	add	r10, r15
			}
		}
	}

	dj->index = i;
   3e91c:	b1 1c       	adc	r11, r1
   3e91e:	49 a9       	sts	0x49, r20
   3e920:	5a a9       	sts	0x4a, r21
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
   3e922:	60 e0       	ldi	r22, 0x00	; 0
   3e924:	70 e0       	ldi	r23, 0x00	; 0
   3e926:	ba 01       	movw	r22, r20
   3e928:	55 27       	eor	r21, r21
   3e92a:	44 27       	eor	r20, r20
   3e92c:	8f a9       	sts	0x4f, r24
   3e92e:	98 ad       	sts	0x68, r25
   3e930:	a0 e0       	ldi	r26, 0x00	; 0
   3e932:	b0 e0       	ldi	r27, 0x00	; 0
   3e934:	48 2b       	or	r20, r24
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
   3e936:	59 2b       	or	r21, r25
   3e938:	6a 2b       	or	r22, r26
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
   3e93a:	7b 2b       	or	r23, r27
   3e93c:	49 8b       	std	Y+17, r20	; 0x11
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
   3e93e:	5a 8b       	std	Y+18, r21	; 0x12
   3e940:	6b 8b       	std	Y+19, r22	; 0x13
   3e942:	7c 8b       	std	Y+20, r23	; 0x14
   3e944:	12 cf       	rjmp	.-476    	; 0x3e76a <pf_open+0x80>
   3e946:	8d 8d       	ldd	r24, Y+29	; 0x1d
   3e948:	88 23       	and	r24, r24
   3e94a:	49 f1       	breq	.+82     	; 0x3e99e <pf_open+0x2b4>
   3e94c:	88 a5       	lds	r24, 0x68
   3e94e:	84 fd       	sbrc	r24, 4
   3e950:	26 c0       	rjmp	.+76     	; 0x3e99e <pf_open+0x2b4>
   3e952:	49 a9       	sts	0x49, r20
   3e954:	5a a9       	sts	0x4a, r21
   3e956:	60 e0       	ldi	r22, 0x00	; 0
   3e958:	70 e0       	ldi	r23, 0x00	; 0
   3e95a:	ba 01       	movw	r22, r20
   3e95c:	55 27       	eor	r21, r21
   3e95e:	44 27       	eor	r20, r20
   3e960:	8f a9       	sts	0x4f, r24
   3e962:	98 ad       	sts	0x68, r25
   3e964:	a0 e0       	ldi	r26, 0x00	; 0

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
   3e966:	b0 e0       	ldi	r27, 0x00	; 0
   3e968:	48 2b       	or	r20, r24
   3e96a:	59 2b       	or	r21, r25
   3e96c:	6a 2b       	or	r22, r26
   3e96e:	7b 2b       	or	r23, r27
   3e970:	f4 01       	movw	r30, r8
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
   3e972:	46 8f       	std	Z+30, r20	; 0x1e
   3e974:	57 8f       	std	Z+31, r21	; 0x1f
   3e976:	60 a3       	lds	r22, 0x50
   3e978:	71 a3       	lds	r23, 0x51
   3e97a:	89 ad       	sts	0x69, r24
   3e97c:	9a ad       	sts	0x6a, r25
   3e97e:	ab ad       	sts	0x6b, r26
   3e980:	bc ad       	sts	0x6c, r27
   3e982:	82 8f       	std	Z+26, r24	; 0x1a
   3e984:	93 8f       	std	Z+27, r25	; 0x1b
   3e986:	a4 8f       	std	Z+28, r26	; 0x1c
   3e988:	b5 8f       	std	Z+29, r27	; 0x1d
   3e98a:	16 8a       	std	Z+22, r1	; 0x16
   3e98c:	17 8a       	std	Z+23, r1	; 0x17
   3e98e:	10 8e       	std	Z+24, r1	; 0x18
   3e990:	11 8e       	std	Z+25, r1	; 0x19
   3e992:	81 e0       	ldi	r24, 0x01	; 1
   3e994:	81 83       	std	Z+1, r24	; 0x01
   3e996:	80 e0       	ldi	r24, 0x00	; 0
   3e998:	03 c0       	rjmp	.+6      	; 0x3e9a0 <pf_open+0x2b6>
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   3e99a:	86 e0       	ldi	r24, 0x06	; 6
   3e99c:	01 c0       	rjmp	.+2      	; 0x3e9a0 <pf_open+0x2b6>
   3e99e:	83 e0       	ldi	r24, 0x03	; 3
   3e9a0:	ec 96       	adiw	r28, 0x3c	; 60
   3e9a2:	0f b6       	in	r0, 0x3f	; 63
   3e9a4:	f8 94       	cli
   3e9a6:	de bf       	out	0x3e, r29	; 62
   3e9a8:	0f be       	out	0x3f, r0	; 63
	fs->fptr = 0;						/* File pointer */
   3e9aa:	cd bf       	out	0x3d, r28	; 61
   3e9ac:	df 91       	pop	r29
   3e9ae:	cf 91       	pop	r28
   3e9b0:	1f 91       	pop	r17
	fs->flag = FA_OPENED;
   3e9b2:	0f 91       	pop	r16
   3e9b4:	ff 90       	pop	r15

	return FR_OK;
   3e9b6:	ef 90       	pop	r14
   3e9b8:	df 90       	pop	r13
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs)						/* Check file system */
		return FR_NOT_ENABLED;
   3e9ba:	cf 90       	pop	r12
   3e9bc:	bf 90       	pop	r11
	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;
   3e9be:	af 90       	pop	r10
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;

	return FR_OK;
}
   3e9c0:	9f 90       	pop	r9
   3e9c2:	8f 90       	pop	r8
   3e9c4:	08 95       	ret
   3e9c6:	1b 96       	adiw	r26, 0x0b	; 11
   3e9c8:	8c 91       	ld	r24, X
   3e9ca:	1b 97       	sbiw	r26, 0x0b	; 11
   3e9cc:	88 23       	and	r24, r24
   3e9ce:	09 f4       	brne	.+2      	; 0x3e9d2 <pf_open+0x2e8>
   3e9d0:	a2 cf       	rjmp	.-188    	; 0x3e916 <pf_open+0x22c>
   3e9d2:	b9 cf       	rjmp	.-142    	; 0x3e946 <pf_open+0x25c>
   3e9d4:	81 e0       	ldi	r24, 0x01	; 1
   3e9d6:	e4 cf       	rjmp	.-56     	; 0x3e9a0 <pf_open+0x2b6>
   3e9d8:	84 e0       	ldi	r24, 0x04	; 4
   3e9da:	e2 cf       	rjmp	.-60     	; 0x3e9a0 <pf_open+0x2b6>

0003e9dc <pf_read>:
   3e9dc:	4f 92       	push	r4
   3e9de:	5f 92       	push	r5
   3e9e0:	6f 92       	push	r6
   3e9e2:	7f 92       	push	r7
   3e9e4:	8f 92       	push	r8
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
   3e9e6:	9f 92       	push	r9
   3e9e8:	af 92       	push	r10
   3e9ea:	bf 92       	push	r11
   3e9ec:	cf 92       	push	r12
   3e9ee:	df 92       	push	r13
   3e9f0:	ef 92       	push	r14
   3e9f2:	ff 92       	push	r15
	if (res != FR_OK) return res;

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
   3e9f4:	0f 93       	push	r16
   3e9f6:	1f 93       	push	r17
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
   3e9f8:	cf 93       	push	r28
   3e9fa:	df 93       	push	r29
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
   3e9fc:	3c 01       	movw	r6, r24
   3e9fe:	6b 01       	movw	r12, r22
   3ea00:	4a 01       	movw	r8, r20
   3ea02:	e0 90 14 02 	lds	r14, 0x0214
   3ea06:	f0 90 15 02 	lds	r15, 0x0215
   3ea0a:	fa 01       	movw	r30, r20
   3ea0c:	11 82       	std	Z+1, r1	; 0x01
   3ea0e:	10 82       	st	Z, r1
   3ea10:	e1 14       	cp	r14, r1
   3ea12:	f1 04       	cpc	r15, r1
   3ea14:	09 f4       	brne	.+2      	; 0x3ea18 <pf_read+0x3c>
   3ea16:	ae c0       	rjmp	.+348    	; 0x3eb74 <pf_read+0x198>
   3ea18:	f7 01       	movw	r30, r14
   3ea1a:	81 81       	ldd	r24, Z+1	; 0x01
   3ea1c:	80 ff       	sbrs	r24, 0
   3ea1e:	ac c0       	rjmp	.+344    	; 0x3eb78 <pf_read+0x19c>
   3ea20:	42 8d       	ldd	r20, Z+26	; 0x1a
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
   3ea22:	53 8d       	ldd	r21, Z+27	; 0x1b
   3ea24:	64 8d       	ldd	r22, Z+28	; 0x1c
   3ea26:	75 8d       	ldd	r23, Z+29	; 0x1d
   3ea28:	86 89       	ldd	r24, Z+22	; 0x16


	*br = 0;
   3ea2a:	97 89       	ldd	r25, Z+23	; 0x17
   3ea2c:	a0 8d       	ldd	r26, Z+24	; 0x18
   3ea2e:	b1 8d       	ldd	r27, Z+25	; 0x19
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
   3ea30:	48 1b       	sub	r20, r24
   3ea32:	59 0b       	sbc	r21, r25
   3ea34:	6a 0b       	sbc	r22, r26
   3ea36:	7b 0b       	sbc	r23, r27
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
   3ea38:	c6 01       	movw	r24, r12
   3ea3a:	a0 e0       	ldi	r26, 0x00	; 0
   3ea3c:	b0 e0       	ldi	r27, 0x00	; 0
   3ea3e:	48 17       	cp	r20, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
   3ea40:	59 07       	cpc	r21, r25
   3ea42:	6a 07       	cpc	r22, r26
   3ea44:	7b 07       	cpc	r23, r27
   3ea46:	08 f4       	brcc	.+2      	; 0x3ea4a <pf_read+0x6e>
   3ea48:	6a 01       	movw	r12, r20
   3ea4a:	53 01       	movw	r10, r6
   3ea4c:	41 2c       	mov	r4, r1
   3ea4e:	82 e0       	ldi	r24, 0x02	; 2
   3ea50:	58 2e       	mov	r5, r24
   3ea52:	86 c0       	rjmp	.+268    	; 0x3eb60 <pf_read+0x184>
   3ea54:	f7 01       	movw	r30, r14
   3ea56:	46 89       	ldd	r20, Z+22	; 0x16
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
   3ea58:	57 89       	ldd	r21, Z+23	; 0x17
   3ea5a:	60 8d       	ldd	r22, Z+24	; 0x18
   3ea5c:	71 8d       	ldd	r23, Z+25	; 0x19
   3ea5e:	db 01       	movw	r26, r22
   3ea60:	ca 01       	movw	r24, r20
   3ea62:	91 70       	andi	r25, 0x01	; 1
   3ea64:	a0 70       	andi	r26, 0x00	; 0
   3ea66:	b0 70       	andi	r27, 0x00	; 0
   3ea68:	00 97       	sbiw	r24, 0x00	; 0
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
   3ea6a:	a1 05       	cpc	r26, r1
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
   3ea6c:	b1 05       	cpc	r27, r1
   3ea6e:	09 f0       	breq	.+2      	; 0x3ea72 <pf_read+0x96>
   3ea70:	40 c0       	rjmp	.+128    	; 0x3eaf2 <pf_read+0x116>
   3ea72:	db 01       	movw	r26, r22

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
   3ea74:	ca 01       	movw	r24, r20
   3ea76:	09 e0       	ldi	r16, 0x09	; 9
   3ea78:	b6 95       	lsr	r27
   3ea7a:	a7 95       	ror	r26
   3ea7c:	97 95       	ror	r25
   3ea7e:	87 95       	ror	r24
   3ea80:	0a 95       	dec	r16
   3ea82:	d1 f7       	brne	.-12     	; 0x3ea78 <pf_read+0x9c>
   3ea84:	c2 81       	ldd	r28, Z+2	; 0x02
   3ea86:	c1 50       	subi	r28, 0x01	; 1
   3ea88:	c8 23       	and	r28, r24
   3ea8a:	e9 f4       	brne	.+58     	; 0x3eac6 <pf_read+0xea>
   3ea8c:	41 15       	cp	r20, r1
   3ea8e:	51 05       	cpc	r21, r1
   3ea90:	61 05       	cpc	r22, r1
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
   3ea92:	71 05       	cpc	r23, r1
   3ea94:	29 f4       	brne	.+10     	; 0x3eaa0 <pf_read+0xc4>
   3ea96:	86 8d       	ldd	r24, Z+30	; 0x1e
   3ea98:	97 8d       	ldd	r25, Z+31	; 0x1f
   3ea9a:	a0 a1       	lds	r26, 0x40
   3ea9c:	b1 a1       	lds	r27, 0x41
   3ea9e:	08 c0       	rjmp	.+16     	; 0x3eab0 <pf_read+0xd4>
   3eaa0:	f7 01       	movw	r30, r14
   3eaa2:	62 a1       	lds	r22, 0x42
   3eaa4:	73 a1       	lds	r23, 0x43
   3eaa6:	84 a1       	lds	r24, 0x44
   3eaa8:	95 a1       	lds	r25, 0x45
			if (!cs) {								/* On the cluster boundary? */
   3eaaa:	46 dc       	rcall	.-1908   	; 0x3e338 <get_fat>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
					fs->org_clust : get_fat(fs->curr_clust);
   3eaac:	dc 01       	movw	r26, r24
   3eaae:	cb 01       	movw	r24, r22
   3eab0:	82 30       	cpi	r24, 0x02	; 2
   3eab2:	91 05       	cpc	r25, r1
   3eab4:	a1 05       	cpc	r26, r1
   3eab6:	b1 05       	cpc	r27, r1
   3eab8:	08 f4       	brcc	.+2      	; 0x3eabc <pf_read+0xe0>
   3eaba:	58 c0       	rjmp	.+176    	; 0x3eb6c <pf_read+0x190>
   3eabc:	f7 01       	movw	r30, r14
   3eabe:	82 a3       	lds	r24, 0x52
   3eac0:	93 a3       	lds	r25, 0x53
   3eac2:	a4 a3       	lds	r26, 0x54
   3eac4:	b5 a3       	lds	r27, 0x55
   3eac6:	f7 01       	movw	r30, r14
   3eac8:	62 a1       	lds	r22, 0x42
   3eaca:	73 a1       	lds	r23, 0x43
   3eacc:	84 a1       	lds	r24, 0x44
   3eace:	95 a1       	lds	r25, 0x45
   3ead0:	bd db       	rcall	.-2182   	; 0x3e24c <clust2sect>
				if (clst <= 1) goto fr_abort;
   3ead2:	dc 01       	movw	r26, r24
   3ead4:	cb 01       	movw	r24, r22
   3ead6:	00 97       	sbiw	r24, 0x00	; 0
   3ead8:	a1 05       	cpc	r26, r1
   3eada:	b1 05       	cpc	r27, r1
   3eadc:	09 f4       	brne	.+2      	; 0x3eae0 <pf_read+0x104>
				fs->curr_clust = clst;				/* Update current cluster */
   3eade:	46 c0       	rjmp	.+140    	; 0x3eb6c <pf_read+0x190>
   3eae0:	8c 0f       	add	r24, r28
   3eae2:	91 1d       	adc	r25, r1
   3eae4:	a1 1d       	adc	r26, r1
   3eae6:	b1 1d       	adc	r27, r1
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
   3eae8:	f7 01       	movw	r30, r14
   3eaea:	86 a3       	lds	r24, 0x56
   3eaec:	97 a3       	lds	r25, 0x57
   3eaee:	a0 a7       	lds	r26, 0x70
   3eaf0:	b1 a7       	lds	r27, 0x71
   3eaf2:	f7 01       	movw	r30, r14
   3eaf4:	26 89       	ldd	r18, Z+22	; 0x16
   3eaf6:	37 89       	ldd	r19, Z+23	; 0x17
   3eaf8:	31 70       	andi	r19, 0x01	; 1
			if (!sect) goto fr_abort;
   3eafa:	c2 01       	movw	r24, r4
   3eafc:	82 1b       	sub	r24, r18
   3eafe:	93 0b       	sbc	r25, r19
   3eb00:	e6 01       	movw	r28, r12
   3eb02:	8c 15       	cp	r24, r12
			fs->dsect = sect + cs;
   3eb04:	9d 05       	cpc	r25, r13
   3eb06:	08 f4       	brcc	.+2      	; 0x3eb0a <pf_read+0x12e>
   3eb08:	ec 01       	movw	r28, r24
   3eb0a:	61 14       	cp	r6, r1
   3eb0c:	71 04       	cpc	r7, r1
   3eb0e:	19 f4       	brne	.+6      	; 0x3eb16 <pf_read+0x13a>
   3eb10:	80 e0       	ldi	r24, 0x00	; 0
   3eb12:	90 e0       	ldi	r25, 0x00	; 0
   3eb14:	01 c0       	rjmp	.+2      	; 0x3eb18 <pf_read+0x13c>
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
   3eb16:	c5 01       	movw	r24, r10
   3eb18:	f7 01       	movw	r30, r14
   3eb1a:	46 a1       	lds	r20, 0x46
   3eb1c:	57 a1       	lds	r21, 0x47
   3eb1e:	60 a5       	lds	r22, 0x60
   3eb20:	71 a5       	lds	r23, 0x61
   3eb22:	8e 01       	movw	r16, r28
   3eb24:	16 d1       	rcall	.+556    	; 0x3ed52 <disk_readp>
   3eb26:	88 23       	and	r24, r24
   3eb28:	09 f5       	brne	.+66     	; 0x3eb6c <pf_read+0x190>
   3eb2a:	ae 01       	movw	r20, r28
   3eb2c:	60 e0       	ldi	r22, 0x00	; 0
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
   3eb2e:	70 e0       	ldi	r23, 0x00	; 0
   3eb30:	f7 01       	movw	r30, r14
   3eb32:	86 89       	ldd	r24, Z+22	; 0x16
   3eb34:	97 89       	ldd	r25, Z+23	; 0x17
   3eb36:	a0 8d       	ldd	r26, Z+24	; 0x18
   3eb38:	b1 8d       	ldd	r27, Z+25	; 0x19
   3eb3a:	84 0f       	add	r24, r20
   3eb3c:	95 1f       	adc	r25, r21
   3eb3e:	a6 1f       	adc	r26, r22
   3eb40:	b7 1f       	adc	r27, r23
   3eb42:	86 8b       	std	Z+22, r24	; 0x16
   3eb44:	97 8b       	std	Z+23, r25	; 0x17
   3eb46:	a0 8f       	std	Z+24, r26	; 0x18
   3eb48:	b1 8f       	std	Z+25, r27	; 0x19
   3eb4a:	ac 0e       	add	r10, r28
		if (dr) goto fr_abort;
   3eb4c:	bd 1e       	adc	r11, r29
   3eb4e:	cc 1a       	sub	r12, r28
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
   3eb50:	dd 0a       	sbc	r13, r29
   3eb52:	f4 01       	movw	r30, r8
   3eb54:	80 81       	ld	r24, Z
   3eb56:	91 81       	ldd	r25, Z+1	; 0x01
   3eb58:	8c 0f       	add	r24, r28
   3eb5a:	9d 1f       	adc	r25, r29
   3eb5c:	91 83       	std	Z+1, r25	; 0x01
   3eb5e:	80 83       	st	Z, r24
   3eb60:	c1 14       	cp	r12, r1
   3eb62:	d1 04       	cpc	r13, r1
   3eb64:	09 f0       	breq	.+2      	; 0x3eb68 <pf_read+0x18c>
   3eb66:	76 cf       	rjmp	.-276    	; 0x3ea54 <pf_read+0x78>
   3eb68:	80 e0       	ldi	r24, 0x00	; 0
   3eb6a:	07 c0       	rjmp	.+14     	; 0x3eb7a <pf_read+0x19e>
   3eb6c:	f7 01       	movw	r30, r14
   3eb6e:	11 82       	std	Z+1, r1	; 0x01
   3eb70:	81 e0       	ldi	r24, 0x01	; 1
   3eb72:	03 c0       	rjmp	.+6      	; 0x3eb7a <pf_read+0x19e>
		btr -= rcnt; *br += rcnt;
   3eb74:	86 e0       	ldi	r24, 0x06	; 6
   3eb76:	01 c0       	rjmp	.+2      	; 0x3eb7a <pf_read+0x19e>
   3eb78:	85 e0       	ldi	r24, 0x05	; 5
   3eb7a:	df 91       	pop	r29
   3eb7c:	cf 91       	pop	r28
   3eb7e:	1f 91       	pop	r17
   3eb80:	0f 91       	pop	r16
   3eb82:	ff 90       	pop	r15
   3eb84:	ef 90       	pop	r14
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
   3eb86:	df 90       	pop	r13
   3eb88:	cf 90       	pop	r12
   3eb8a:	bf 90       	pop	r11
   3eb8c:	af 90       	pop	r10
		if (dr) goto fr_abort;
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
   3eb8e:	9f 90       	pop	r9
   3eb90:	8f 90       	pop	r8

fr_abort:
	fs->flag = 0;
   3eb92:	7f 90       	pop	r7
   3eb94:	6f 90       	pop	r6
	return FR_DISK_ERR;
   3eb96:	5f 90       	pop	r5
   3eb98:	4f 90       	pop	r4
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;


	*br = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
   3eb9a:	08 95       	ret

0003eb9c <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
   3eb9c:	ff 92       	push	r15
   3eb9e:	0f 93       	push	r16
   3eba0:	1f 93       	push	r17
   3eba2:	cf 93       	push	r28
   3eba4:	df 93       	push	r29
   3eba6:	c8 2f       	mov	r28, r24
   3eba8:	d4 2f       	mov	r29, r20
   3ebaa:	15 2f       	mov	r17, r21
   3ebac:	06 2f       	mov	r16, r22
   3ebae:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
   3ebb0:	87 ff       	sbrs	r24, 7
   3ebb2:	08 c0       	rjmp	.+16     	; 0x3ebc4 <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
   3ebb4:	87 e7       	ldi	r24, 0x77	; 119
   3ebb6:	40 e0       	ldi	r20, 0x00	; 0
   3ebb8:	50 e0       	ldi	r21, 0x00	; 0
   3ebba:	ba 01       	movw	r22, r20
   3ebbc:	ef df       	rcall	.-34     	; 0x3eb9c <send_cmd>
   3ebbe:	82 30       	cpi	r24, 0x02	; 2
		if (res > 1) return res;
   3ebc0:	e0 f4       	brcc	.+56     	; 0x3ebfa <send_cmd+0x5e>
   3ebc2:	cf 77       	andi	r28, 0x7F	; 127
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
   3ebc4:	30 d1       	rcall	.+608    	; 0x3ee26 <select>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	select();
   3ebc6:	8c 2f       	mov	r24, r28
   3ebc8:	33 d1       	rcall	.+614    	; 0x3ee30 <xmit_spi>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
   3ebca:	8f 2d       	mov	r24, r15
   3ebcc:	31 d1       	rcall	.+610    	; 0x3ee30 <xmit_spi>
   3ebce:	80 2f       	mov	r24, r16
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
   3ebd0:	2f d1       	rcall	.+606    	; 0x3ee30 <xmit_spi>
   3ebd2:	81 2f       	mov	r24, r17
   3ebd4:	2d d1       	rcall	.+602    	; 0x3ee30 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
   3ebd6:	8d 2f       	mov	r24, r29
   3ebd8:	2b d1       	rcall	.+598    	; 0x3ee30 <xmit_spi>
   3ebda:	c0 34       	cpi	r28, 0x40	; 64
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
   3ebdc:	21 f0       	breq	.+8      	; 0x3ebe6 <send_cmd+0x4a>
   3ebde:	c8 34       	cpi	r28, 0x48	; 72
   3ebe0:	21 f0       	breq	.+8      	; 0x3ebea <send_cmd+0x4e>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
   3ebe2:	81 e0       	ldi	r24, 0x01	; 1
   3ebe4:	03 c0       	rjmp	.+6      	; 0x3ebec <send_cmd+0x50>
   3ebe6:	85 e9       	ldi	r24, 0x95	; 149
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
   3ebe8:	01 c0       	rjmp	.+2      	; 0x3ebec <send_cmd+0x50>
   3ebea:	87 e8       	ldi	r24, 0x87	; 135
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
   3ebec:	21 d1       	rcall	.+578    	; 0x3ee30 <xmit_spi>
   3ebee:	ca e0       	ldi	r28, 0x0A	; 10
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
   3ebf0:	1e d1       	rcall	.+572    	; 0x3ee2e <rcv_spi>
   3ebf2:	87 ff       	sbrs	r24, 7
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
   3ebf4:	02 c0       	rjmp	.+4      	; 0x3ebfa <send_cmd+0x5e>
   3ebf6:	c1 50       	subi	r28, 0x01	; 1
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
   3ebf8:	d9 f7       	brne	.-10     	; 0x3ebf0 <send_cmd+0x54>
	xmit_spi(n);
   3ebfa:	df 91       	pop	r29
   3ebfc:	cf 91       	pop	r28
   3ebfe:	1f 91       	pop	r17

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
   3ec00:	0f 91       	pop	r16
   3ec02:	ff 90       	pop	r15
	} while ((res & 0x80) && --n);
   3ec04:	08 95       	ret

0003ec06 <disk_initialize>:
   3ec06:	df 92       	push	r13
   3ec08:	ef 92       	push	r14
   3ec0a:	ff 92       	push	r15

	return res;			/* Return with the response value */
}
   3ec0c:	0f 93       	push	r16
   3ec0e:	1f 93       	push	r17
   3ec10:	cf 93       	push	r28
   3ec12:	df 93       	push	r29
   3ec14:	00 d0       	rcall	.+0      	; 0x3ec16 <disk_initialize+0x10>
   3ec16:	0f 92       	push	r0
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
   3ec18:	0f 92       	push	r0
   3ec1a:	cd b7       	in	r28, 0x3d	; 61
   3ec1c:	de b7       	in	r29, 0x3e	; 62
   3ec1e:	f6 d0       	rcall	.+492    	; 0x3ee0c <init_spi>
   3ec20:	04 e6       	ldi	r16, 0x64	; 100
   3ec22:	f9 d0       	rcall	.+498    	; 0x3ee16 <dly_100us>
   3ec24:	01 50       	subi	r16, 0x01	; 1
   3ec26:	e9 f7       	brne	.-6      	; 0x3ec22 <disk_initialize+0x1c>
   3ec28:	0a e0       	ldi	r16, 0x0A	; 10
   3ec2a:	00 d1       	rcall	.+512    	; 0x3ee2c <deselect>
   3ec2c:	01 50       	subi	r16, 0x01	; 1
   3ec2e:	e9 f7       	brne	.-6      	; 0x3ec2a <disk_initialize+0x24>
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

	init_spi();							/* Initialize ports to control MMC */
   3ec30:	80 e4       	ldi	r24, 0x40	; 64
   3ec32:	40 e0       	ldi	r20, 0x00	; 0
   3ec34:	50 e0       	ldi	r21, 0x00	; 0
	for (n = 100; n; n--) dly_100us();	/* 10ms delay */
   3ec36:	ba 01       	movw	r22, r20
   3ec38:	b1 df       	rcall	.-158    	; 0x3eb9c <send_cmd>
   3ec3a:	81 30       	cpi	r24, 0x01	; 1
   3ec3c:	09 f0       	breq	.+2      	; 0x3ec40 <disk_initialize+0x3a>
   3ec3e:	5f c0       	rjmp	.+190    	; 0x3ecfe <disk_initialize+0xf8>
	for (n = 10; n; n--) deselect();	/* 80 Dummy clocks with CS=H */
   3ec40:	88 e4       	ldi	r24, 0x48	; 72
   3ec42:	4a ea       	ldi	r20, 0xAA	; 170
   3ec44:	51 e0       	ldi	r21, 0x01	; 1
   3ec46:	60 e0       	ldi	r22, 0x00	; 0

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
   3ec48:	70 e0       	ldi	r23, 0x00	; 0
   3ec4a:	a8 df       	rcall	.-176    	; 0x3eb9c <send_cmd>
   3ec4c:	81 30       	cpi	r24, 0x01	; 1
   3ec4e:	91 f5       	brne	.+100    	; 0x3ecb4 <disk_initialize+0xae>
   3ec50:	7e 01       	movw	r14, r28
   3ec52:	08 94       	sec
   3ec54:	e1 1c       	adc	r14, r1
   3ec56:	f1 1c       	adc	r15, r1
   3ec58:	87 01       	movw	r16, r14
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
   3ec5a:	34 e0       	ldi	r19, 0x04	; 4
   3ec5c:	d3 2e       	mov	r13, r19
   3ec5e:	e7 d0       	rcall	.+462    	; 0x3ee2e <rcv_spi>
   3ec60:	f8 01       	movw	r30, r16
   3ec62:	81 93       	st	Z+, r24
   3ec64:	8f 01       	movw	r16, r30
   3ec66:	da 94       	dec	r13
   3ec68:	d1 f7       	brne	.-12     	; 0x3ec5e <disk_initialize+0x58>
   3ec6a:	8b 81       	ldd	r24, Y+3	; 0x03
   3ec6c:	81 30       	cpi	r24, 0x01	; 1
   3ec6e:	09 f0       	breq	.+2      	; 0x3ec72 <disk_initialize+0x6c>
   3ec70:	46 c0       	rjmp	.+140    	; 0x3ecfe <disk_initialize+0xf8>
   3ec72:	8c 81       	ldd	r24, Y+4	; 0x04
   3ec74:	8a 3a       	cpi	r24, 0xAA	; 170
   3ec76:	09 f0       	breq	.+2      	; 0x3ec7a <disk_initialize+0x74>
   3ec78:	42 c0       	rjmp	.+132    	; 0x3ecfe <disk_initialize+0xf8>
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
   3ec7a:	05 c0       	rjmp	.+10     	; 0x3ec86 <disk_initialize+0x80>
   3ec7c:	cc d0       	rcall	.+408    	; 0x3ee16 <dly_100us>
   3ec7e:	01 50       	subi	r16, 0x01	; 1
   3ec80:	10 40       	sbci	r17, 0x00	; 0
   3ec82:	19 f4       	brne	.+6      	; 0x3ec8a <disk_initialize+0x84>
   3ec84:	3c c0       	rjmp	.+120    	; 0x3ecfe <disk_initialize+0xf8>
   3ec86:	00 e1       	ldi	r16, 0x10	; 16
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
   3ec88:	17 e2       	ldi	r17, 0x27	; 39
   3ec8a:	89 ee       	ldi	r24, 0xE9	; 233
   3ec8c:	40 e0       	ldi	r20, 0x00	; 0
   3ec8e:	50 e0       	ldi	r21, 0x00	; 0
   3ec90:	60 e0       	ldi	r22, 0x00	; 0
   3ec92:	70 e4       	ldi	r23, 0x40	; 64
   3ec94:	83 df       	rcall	.-250    	; 0x3eb9c <send_cmd>
   3ec96:	88 23       	and	r24, r24
   3ec98:	89 f7       	brne	.-30     	; 0x3ec7c <disk_initialize+0x76>
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
   3ec9a:	47 c0       	rjmp	.+142    	; 0x3ed2a <disk_initialize+0x124>
   3ec9c:	04 e0       	ldi	r16, 0x04	; 4
   3ec9e:	c7 d0       	rcall	.+398    	; 0x3ee2e <rcv_spi>
   3eca0:	f7 01       	movw	r30, r14
   3eca2:	81 93       	st	Z+, r24
   3eca4:	7f 01       	movw	r14, r30

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
   3eca6:	01 50       	subi	r16, 0x01	; 1
   3eca8:	d1 f7       	brne	.-12     	; 0x3ec9e <disk_initialize+0x98>
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
   3ecaa:	89 81       	ldd	r24, Y+1	; 0x01
   3ecac:	86 ff       	sbrs	r24, 6
   3ecae:	25 c0       	rjmp	.+74     	; 0x3ecfa <disk_initialize+0xf4>
   3ecb0:	9c e0       	ldi	r25, 0x0C	; 12
   3ecb2:	26 c0       	rjmp	.+76     	; 0x3ed00 <disk_initialize+0xfa>
   3ecb4:	89 ee       	ldi	r24, 0xE9	; 233
   3ecb6:	40 e0       	ldi	r20, 0x00	; 0
   3ecb8:	50 e0       	ldi	r21, 0x00	; 0
   3ecba:	ba 01       	movw	r22, r20
   3ecbc:	6f df       	rcall	.-290    	; 0x3eb9c <send_cmd>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
   3ecbe:	82 30       	cpi	r24, 0x02	; 2
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
   3ecc0:	20 f4       	brcc	.+8      	; 0x3ecca <disk_initialize+0xc4>
   3ecc2:	92 e0       	ldi	r25, 0x02	; 2
   3ecc4:	29 ee       	ldi	r18, 0xE9	; 233
   3ecc6:	e2 2e       	mov	r14, r18
   3ecc8:	03 c0       	rjmp	.+6      	; 0x3ecd0 <disk_initialize+0xca>
   3ecca:	91 e0       	ldi	r25, 0x01	; 1
   3eccc:	81 e4       	ldi	r24, 0x41	; 65
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
   3ecce:	e8 2e       	mov	r14, r24
   3ecd0:	00 e1       	ldi	r16, 0x10	; 16
   3ecd2:	17 e2       	ldi	r17, 0x27	; 39
   3ecd4:	08 c0       	rjmp	.+16     	; 0x3ece6 <disk_initialize+0xe0>
   3ecd6:	9d 83       	std	Y+5, r25	; 0x05
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
   3ecd8:	9e d0       	rcall	.+316    	; 0x3ee16 <dly_100us>
   3ecda:	01 50       	subi	r16, 0x01	; 1
   3ecdc:	10 40       	sbci	r17, 0x00	; 0
   3ecde:	9d 81       	ldd	r25, Y+5	; 0x05
   3ece0:	01 15       	cp	r16, r1
   3ece2:	11 05       	cpc	r17, r1
   3ece4:	61 f0       	breq	.+24     	; 0x3ecfe <disk_initialize+0xf8>
   3ece6:	8e 2d       	mov	r24, r14
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
   3ece8:	40 e0       	ldi	r20, 0x00	; 0
   3ecea:	50 e0       	ldi	r21, 0x00	; 0
   3ecec:	ba 01       	movw	r22, r20
   3ecee:	9d 83       	std	Y+5, r25	; 0x05
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
   3ecf0:	55 df       	rcall	.-342    	; 0x3eb9c <send_cmd>
   3ecf2:	9d 81       	ldd	r25, Y+5	; 0x05
   3ecf4:	88 23       	and	r24, r24
   3ecf6:	79 f7       	brne	.-34     	; 0x3ecd6 <disk_initialize+0xd0>
   3ecf8:	21 c0       	rjmp	.+66     	; 0x3ed3c <disk_initialize+0x136>
   3ecfa:	94 e0       	ldi	r25, 0x04	; 4
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
   3ecfc:	01 c0       	rjmp	.+2      	; 0x3ed00 <disk_initialize+0xfa>
   3ecfe:	90 e0       	ldi	r25, 0x00	; 0
   3ed00:	90 93 16 02 	sts	0x0216, r25
   3ed04:	9d 83       	std	Y+5, r25	; 0x05
   3ed06:	92 d0       	rcall	.+292    	; 0x3ee2c <deselect>
   3ed08:	81 e0       	ldi	r24, 0x01	; 1
   3ed0a:	9d 81       	ldd	r25, Y+5	; 0x05
   3ed0c:	91 11       	cpse	r25, r1
   3ed0e:	80 e0       	ldi	r24, 0x00	; 0
   3ed10:	0f 90       	pop	r0
   3ed12:	0f 90       	pop	r0
   3ed14:	0f 90       	pop	r0
   3ed16:	0f 90       	pop	r0
   3ed18:	0f 90       	pop	r0
   3ed1a:	df 91       	pop	r29
   3ed1c:	cf 91       	pop	r28
   3ed1e:	1f 91       	pop	r17
   3ed20:	0f 91       	pop	r16
   3ed22:	ff 90       	pop	r15
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
   3ed24:	ef 90       	pop	r14
   3ed26:	df 90       	pop	r13
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
   3ed28:	08 95       	ret
		}
	}
	CardType = ty;
   3ed2a:	8a e7       	ldi	r24, 0x7A	; 122
   3ed2c:	40 e0       	ldi	r20, 0x00	; 0
	deselect();
   3ed2e:	50 e0       	ldi	r21, 0x00	; 0
   3ed30:	ba 01       	movw	r22, r20
   3ed32:	34 df       	rcall	.-408    	; 0x3eb9c <send_cmd>

	return ty ? 0 : STA_NOINIT;
   3ed34:	88 23       	and	r24, r24
   3ed36:	09 f4       	brne	.+2      	; 0x3ed3a <disk_initialize+0x134>
   3ed38:	b1 cf       	rjmp	.-158    	; 0x3ec9c <disk_initialize+0x96>
   3ed3a:	e1 cf       	rjmp	.-62     	; 0x3ecfe <disk_initialize+0xf8>
}
   3ed3c:	80 e5       	ldi	r24, 0x50	; 80
   3ed3e:	40 e0       	ldi	r20, 0x00	; 0
   3ed40:	52 e0       	ldi	r21, 0x02	; 2
   3ed42:	60 e0       	ldi	r22, 0x00	; 0
   3ed44:	70 e0       	ldi	r23, 0x00	; 0
   3ed46:	9d 83       	std	Y+5, r25	; 0x05
   3ed48:	29 df       	rcall	.-430    	; 0x3eb9c <send_cmd>
   3ed4a:	9d 81       	ldd	r25, Y+5	; 0x05
   3ed4c:	88 23       	and	r24, r24
   3ed4e:	b9 f6       	brne	.-82     	; 0x3ecfe <disk_initialize+0xf8>
   3ed50:	d7 cf       	rjmp	.-82     	; 0x3ed00 <disk_initialize+0xfa>

0003ed52 <disk_readp>:
   3ed52:	af 92       	push	r10
   3ed54:	bf 92       	push	r11
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
   3ed56:	cf 92       	push	r12
   3ed58:	df 92       	push	r13
   3ed5a:	ef 92       	push	r14
   3ed5c:	ff 92       	push	r15
   3ed5e:	0f 93       	push	r16
   3ed60:	1f 93       	push	r17
   3ed62:	cf 93       	push	r28
   3ed64:	df 93       	push	r29
   3ed66:	0f 92       	push	r0
   3ed68:	cd b7       	in	r28, 0x3d	; 61
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
   3ed6a:	de b7       	in	r29, 0x3e	; 62
   3ed6c:	6c 01       	movw	r12, r24
   3ed6e:	79 01       	movw	r14, r18
   3ed70:	80 91 16 02 	lds	r24, 0x0216
   3ed74:	83 fd       	sbrc	r24, 3
   3ed76:	07 c0       	rjmp	.+14     	; 0x3ed86 <disk_readp+0x34>
   3ed78:	e9 e0       	ldi	r30, 0x09	; 9
   3ed7a:	44 0f       	add	r20, r20
   3ed7c:	55 1f       	adc	r21, r21
   3ed7e:	66 1f       	adc	r22, r22
   3ed80:	77 1f       	adc	r23, r23
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
   3ed82:	ea 95       	dec	r30
   3ed84:	d1 f7       	brne	.-12     	; 0x3ed7a <disk_readp+0x28>
   3ed86:	81 e5       	ldi	r24, 0x51	; 81
   3ed88:	09 df       	rcall	.-494    	; 0x3eb9c <send_cmd>
   3ed8a:	88 23       	and	r24, r24
   3ed8c:	79 f5       	brne	.+94     	; 0x3edec <disk_readp+0x9a>
   3ed8e:	50 e4       	ldi	r21, 0x40	; 64
   3ed90:	a5 2e       	mov	r10, r21
   3ed92:	5c e9       	ldi	r21, 0x9C	; 156
   3ed94:	b5 2e       	mov	r11, r21
   3ed96:	4b d0       	rcall	.+150    	; 0x3ee2e <rcv_spi>
   3ed98:	8f 3f       	cpi	r24, 0xFF	; 255
   3ed9a:	39 f4       	brne	.+14     	; 0x3edaa <disk_readp+0x58>
   3ed9c:	08 94       	sec
   3ed9e:	a1 08       	sbc	r10, r1
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
   3eda0:	b1 08       	sbc	r11, r1
   3eda2:	a1 14       	cp	r10, r1
   3eda4:	b1 04       	cpc	r11, r1
   3eda6:	b9 f7       	brne	.-18     	; 0x3ed96 <disk_readp+0x44>
   3eda8:	21 c0       	rjmp	.+66     	; 0x3edec <disk_readp+0x9a>
   3edaa:	8e 3f       	cpi	r24, 0xFE	; 254
   3edac:	f9 f4       	brne	.+62     	; 0x3edec <disk_readp+0x9a>
   3edae:	42 e0       	ldi	r20, 0x02	; 2
   3edb0:	a4 2e       	mov	r10, r20
   3edb2:	b4 2e       	mov	r11, r20
   3edb4:	ae 18       	sub	r10, r14

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
   3edb6:	bf 08       	sbc	r11, r15
   3edb8:	a0 1a       	sub	r10, r16
   3edba:	b1 0a       	sbc	r11, r17
   3edbc:	e1 14       	cp	r14, r1
   3edbe:	f1 04       	cpc	r15, r1
   3edc0:	29 f0       	breq	.+10     	; 0x3edcc <disk_readp+0x7a>
   3edc2:	35 d0       	rcall	.+106    	; 0x3ee2e <rcv_spi>
   3edc4:	08 94       	sec
   3edc6:	e1 08       	sbc	r14, r1

		bc = 40000;
		do {							/* Wait for data packet */
			rc = rcv_spi();
   3edc8:	f1 08       	sbc	r15, r1
   3edca:	f8 cf       	rjmp	.-16     	; 0x3edbc <disk_readp+0x6a>
		} while (rc == 0xFF && --bc);
   3edcc:	30 d0       	rcall	.+96     	; 0x3ee2e <rcv_spi>
   3edce:	f6 01       	movw	r30, r12
   3edd0:	81 93       	st	Z+, r24
   3edd2:	6f 01       	movw	r12, r30
   3edd4:	01 50       	subi	r16, 0x01	; 1
   3edd6:	10 40       	sbci	r17, 0x00	; 0
   3edd8:	c9 f7       	brne	.-14     	; 0x3edcc <disk_readp+0x7a>
   3edda:	29 d0       	rcall	.+82     	; 0x3ee2e <rcv_spi>
   3eddc:	08 94       	sec

		if (rc == 0xFE) {				/* A data packet arrived */
   3edde:	a1 08       	sbc	r10, r1
   3ede0:	b1 08       	sbc	r11, r1
			bc = 514 - ofs - cnt;
   3ede2:	a1 14       	cp	r10, r1
   3ede4:	b1 04       	cpc	r11, r1
   3ede6:	c9 f7       	brne	.-14     	; 0x3edda <disk_readp+0x88>
   3ede8:	80 e0       	ldi	r24, 0x00	; 0
   3edea:	01 c0       	rjmp	.+2      	; 0x3edee <disk_readp+0x9c>
   3edec:	81 e0       	ldi	r24, 0x01	; 1
   3edee:	89 83       	std	Y+1, r24	; 0x01

			/* Skip leading bytes */
			if (ofs) {
   3edf0:	1d d0       	rcall	.+58     	; 0x3ee2c <deselect>
   3edf2:	89 81       	ldd	r24, Y+1	; 0x01
   3edf4:	0f 90       	pop	r0
				do rcv_spi(); while (--ofs);
   3edf6:	df 91       	pop	r29
   3edf8:	cf 91       	pop	r28
   3edfa:	1f 91       	pop	r17
   3edfc:	0f 91       	pop	r16
   3edfe:	ff 90       	pop	r15
   3ee00:	ef 90       	pop	r14
			}

			/* Receive a part of the sector */
			do {
				*buff++ = rcv_spi();
   3ee02:	df 90       	pop	r13
   3ee04:	cf 90       	pop	r12
   3ee06:	bf 90       	pop	r11
   3ee08:	af 90       	pop	r10
   3ee0a:	08 95       	ret

0003ee0c <init_spi>:
			} while (--cnt);
   3ee0c:	20 9a       	sbi	0x04, 0	; 4
   3ee0e:	22 9a       	sbi	0x04, 2	; 4
   3ee10:	21 9a       	sbi	0x04, 1	; 4

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
   3ee12:	2b 9a       	sbi	0x05, 3	; 5
   3ee14:	08 95       	ret

0003ee16 <dly_100us>:
   3ee16:	80 ea       	ldi	r24, 0xA0	; 160
   3ee18:	31 97       	sbiw	r30, 0x01	; 1
   3ee1a:	31 97       	sbiw	r30, 0x01	; 1
   3ee1c:	31 97       	sbiw	r30, 0x01	; 1
   3ee1e:	00 00       	nop
   3ee20:	8a 95       	dec	r24

			res = RES_OK;
   3ee22:	d1 f7       	brne	.-12     	; 0x3ee18 <dly_100us+0x2>
   3ee24:	08 95       	ret

0003ee26 <select>:
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */

	res = RES_ERROR;
   3ee26:	02 d0       	rcall	.+4      	; 0x3ee2c <deselect>

			res = RES_OK;
		}
	}

	deselect();
   3ee28:	28 98       	cbi	0x05, 0	; 5
   3ee2a:	01 c0       	rjmp	.+2      	; 0x3ee2e <rcv_spi>

0003ee2c <deselect>:
   3ee2c:	28 9a       	sbi	0x05, 0	; 5

0003ee2e <rcv_spi>:

	return res;
}
   3ee2e:	8f ef       	ldi	r24, 0xFF	; 255

0003ee30 <xmit_spi>:
   3ee30:	98 e0       	ldi	r25, 0x08	; 8
   3ee32:	87 fd       	sbrc	r24, 7
   3ee34:	2a 9a       	sbi	0x05, 2	; 5
   3ee36:	87 ff       	sbrs	r24, 7
   3ee38:	2a 98       	cbi	0x05, 2	; 5
   3ee3a:	88 0f       	add	r24, r24
   3ee3c:	1b 99       	sbic	0x03, 3	; 3
   3ee3e:	83 95       	inc	r24
   3ee40:	29 9a       	sbi	0x05, 1	; 5
   3ee42:	29 98       	cbi	0x05, 1	; 5
   3ee44:	9a 95       	dec	r25
   3ee46:	a9 f7       	brne	.-22     	; 0x3ee32 <xmit_spi+0x2>
	inc	r24		; /
	sbi	PORT_CK		; A positive pulse to SCLK
	cbi	PORT_CK		; /
	dec	r25		; Repeat 8 times
	brne	1b		; /
	ret
   3ee48:	08 95       	ret

0003ee4a <flash_erase>:

.global flash_erase
.func flash_erase
flash_erase:

	movw	ZL, r22
   3ee4a:	fb 01       	movw	r30, r22
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
   3ee4c:	8b bf       	out	0x3b, r24	; 59
#endif

	; Initiate erase operation
	ldi	r24, 0b00000011
   3ee4e:	83 e0       	ldi	r24, 0x03	; 3
	sts	_SFR_MEM_ADDR(SPMCSR), r24
   3ee50:	80 93 57 00 	sts	0x0057, r24
	spm
   3ee54:	e8 95       	spm

	; Wait for end of erase operation
1:	lds	r24, _SFR_MEM_ADDR(SPMCSR)
   3ee56:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
   3ee5a:	80 fd       	sbrc	r24, 0
	rjmp	1b
   3ee5c:	fc cf       	rjmp	.-8      	; 0x3ee56 <flash_erase+0xc>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
   3ee5e:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCSR), r24
   3ee60:	80 93 57 00 	sts	0x0057, r24
	spm
   3ee64:	e8 95       	spm

9:	ret
   3ee66:	08 95       	ret

0003ee68 <flash_write>:
; void flash_write (DWORD flash_addr, const BYTE* data);

.global flash_write
.func flash_write
flash_write:
	push	r0
   3ee68:	0f 92       	push	r0
	push	r1
   3ee6a:	1f 92       	push	r1

#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
   3ee6c:	8b bf       	out	0x3b, r24	; 59
#endif

	; Fill page buffer
	movw	ZL, r22
   3ee6e:	fb 01       	movw	r30, r22
	movw	XL, r20
   3ee70:	da 01       	movw	r26, r20
	ldi	r25, lo8(SPM_PAGESIZE/2)
   3ee72:	90 e8       	ldi	r25, 0x80	; 128
1:	ld	r0, X+
   3ee74:	0d 90       	ld	r0, X+
	ld	r1, X+
   3ee76:	1d 90       	ld	r1, X+
	ldi	r24, 0b00000001
   3ee78:	81 e0       	ldi	r24, 0x01	; 1
	sts	_SFR_MEM_ADDR(SPMCSR), r24
   3ee7a:	80 93 57 00 	sts	0x0057, r24
	spm
   3ee7e:	e8 95       	spm
	adiw	ZL, 2
   3ee80:	32 96       	adiw	r30, 0x02	; 2
	dec	r25
   3ee82:	9a 95       	dec	r25
	brne	1b
   3ee84:	b9 f7       	brne	.-18     	; 0x3ee74 <flash_write+0xc>

	; Initiate write operation
	movw	ZL, r22
   3ee86:	fb 01       	movw	r30, r22
	ldi	r24, 0b00000101
   3ee88:	85 e0       	ldi	r24, 0x05	; 5
	sts	_SFR_MEM_ADDR(SPMCSR), r24
   3ee8a:	80 93 57 00 	sts	0x0057, r24
	spm
   3ee8e:	e8 95       	spm

	; Wait for end of write operation
2:	lds	r24, _SFR_MEM_ADDR(SPMCSR)
   3ee90:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
   3ee94:	80 fd       	sbrc	r24, 0
	rjmp	2b
   3ee96:	fc cf       	rjmp	.-8      	; 0x3ee90 <flash_write+0x28>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
   3ee98:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCSR), r24
   3ee9a:	80 93 57 00 	sts	0x0057, r24
	spm
   3ee9e:	e8 95       	spm

9:	pop	r1
   3eea0:	1f 90       	pop	r1
	pop	r0
   3eea2:	0f 90       	pop	r0
	ret
   3eea4:	08 95       	ret

0003eea6 <main>:
uint8_t check = 1;


//*****************************************************************************
int main(void)
{
   3eea6:	cf 93       	push	r28
   3eea8:	df 93       	push	r29
   3eeaa:	cd b7       	in	r28, 0x3d	; 61
   3eeac:	de b7       	in	r29, 0x3e	; 62
   3eeae:	c1 53       	subi	r28, 0x31	; 49
   3eeb0:	d1 40       	sbci	r29, 0x01	; 1
   3eeb2:	0f b6       	in	r0, 0x3f	; 63
   3eeb4:	f8 94       	cli
   3eeb6:	de bf       	out	0x3e, r29	; 62
   3eeb8:	0f be       	out	0x3f, r0	; 63
   3eeba:	cd bf       	out	0x3d, r28	; 61
	unsigned int	rcvdCharCntr	=	0;
#endif

	//*	some chips dont set the stack properly
	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
   3eebc:	01 e2       	ldi	r16, 0x21	; 33
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3eebe:	0e bf       	out	0x3e, r16	; 62
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3eec0:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3eec2:	0d bf       	out	0x3d, r16	; 61
#ifdef _FIX_ISSUE_181_
	//************************************************************************
	//*	Dec 29,	2011	<MLS> Issue #181, added watch dog timmer support
	//*	handle the watch dog timer
	uint8_t	mcuStatusReg;
	mcuStatusReg	=	MCUSR;
   3eec4:	94 b7       	in	r25, 0x34	; 52

	__asm__ __volatile__ ("cli");
   3eec6:	f8 94       	cli
	__asm__ __volatile__ ("wdr");
   3eec8:	a8 95       	wdr
	MCUSR	=	0;
   3eeca:	14 be       	out	0x34, r1	; 52
	WDTCSR	|=	_BV(WDCE) | _BV(WDE);
   3eecc:	80 91 60 00 	lds	r24, 0x0060
   3eed0:	88 61       	ori	r24, 0x18	; 24
   3eed2:	80 93 60 00 	sts	0x0060, r24
	WDTCSR	=	0;
   3eed6:	10 92 60 00 	sts	0x0060, r1
	__asm__ __volatile__ ("sei");
   3eeda:	78 94       	sei
    
    
       
    
	// check if WDT generated the reset, if so, go straight to app
	if (mcuStatusReg & _BV(WDRF))
   3eedc:	93 ff       	sbrs	r25, 3
   3eede:	05 c0       	rjmp	.+10     	; 0x3eeea <main+0x44>
	{
		app_start();
   3eee0:	e0 91 12 02 	lds	r30, 0x0212
   3eee4:	f0 91 13 02 	lds	r31, 0x0213
   3eee8:	19 95       	eicall
	 * Branch to bootloader or application code ?
	 */

#ifndef REMOVE_BOOTLOADER_LED
	/* PROG_PIN pulled low, indicate with LED that bootloader is active */
	PROGLED_DDR		|=	(1<<PROGLED_PIN);
   3eeea:	27 9a       	sbi	0x04, 7	; 4
//	PROGLED_PORT	&=	~(1<<PROGLED_PIN);	// active low LED ON
	PROGLED_PORT	|=	(1<<PROGLED_PIN);	// active high LED ON
   3eeec:	2f 9a       	sbi	0x05, 7	; 5
	/*
	 * Init UART
	 * set baudrate and enable USART receiver and transmiter without interrupts
	 */
#if UART_BAUDRATE_DOUBLE_SPEED
	UART_STATUS_REG		|=	(1 <<UART_DOUBLE_SPEED);
   3eeee:	80 91 c0 00 	lds	r24, 0x00C0
   3eef2:	82 60       	ori	r24, 0x02	; 2
   3eef4:	80 93 c0 00 	sts	0x00C0, r24
#endif
	UART_BAUD_RATE_LOW	=	UART_BAUD_SELECT(BAUDRATE,F_CPU);
   3eef8:	80 e1       	ldi	r24, 0x10	; 16
   3eefa:	80 93 c4 00 	sts	0x00C4, r24
	UART_CONTROL_REG	=	(1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);
   3eefe:	88 e1       	ldi	r24, 0x18	; 24
   3ef00:	80 93 c1 00 	sts	0x00C1, r24

	asm volatile ("nop");			// wait until port has changed
   3ef04:	00 00       	nop
	}
	//************************************************************************
#endif


	boot_timer	=	0;
   3ef06:	88 24       	eor	r8, r8
   3ef08:	99 24       	eor	r9, r9
   3ef0a:	54 01       	movw	r10, r8
			if (boot_timer > boot_timeout)
			{
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
			}
		#ifdef BLINK_LED_WHILE_WAITING
			if ((boot_timer % _BLINK_LOOP_COUNT_) == 0)
   3ef0c:	17 ec       	ldi	r17, 0xC7	; 199
   3ef0e:	c1 2e       	mov	r12, r17
   3ef10:	1b e1       	ldi	r17, 0x1B	; 27
   3ef12:	d1 2e       	mov	r13, r17
   3ef14:	e1 2c       	mov	r14, r1
   3ef16:	f1 2c       	mov	r15, r1
uint8_t check = 1;


//*****************************************************************************
int main(void)
{
   3ef18:	00 e0       	ldi	r16, 0x00	; 0
   3ef1a:	10 e0       	ldi	r17, 0x00	; 0
   3ef1c:	24 c0       	rjmp	.+72     	; 0x3ef66 <main+0xc0>
   3ef1e:	25 e0       	ldi	r18, 0x05	; 5
   3ef20:	2a 95       	dec	r18
   3ef22:	f1 f7       	brne	.-4      	; 0x3ef20 <main+0x7a>
   3ef24:	00 00       	nop
	while (boot_state==0)
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
		{
			_delay_ms(0.001);
			boot_timer++;
   3ef26:	08 94       	sec
   3ef28:	81 1c       	adc	r8, r1
   3ef2a:	91 1c       	adc	r9, r1
   3ef2c:	a1 1c       	adc	r10, r1
   3ef2e:	b1 1c       	adc	r11, r1
			if (boot_timer > boot_timeout)
			{
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
   3ef30:	01 e0       	ldi	r16, 0x01	; 1
   3ef32:	10 e0       	ldi	r17, 0x00	; 0
   3ef34:	31 e2       	ldi	r19, 0x21	; 33
   3ef36:	83 16       	cp	r8, r19
   3ef38:	3e e4       	ldi	r19, 0x4E	; 78
   3ef3a:	93 06       	cpc	r9, r19
   3ef3c:	30 e0       	ldi	r19, 0x00	; 0
   3ef3e:	a3 06       	cpc	r10, r19
   3ef40:	30 e0       	ldi	r19, 0x00	; 0
   3ef42:	b3 06       	cpc	r11, r19
   3ef44:	10 f4       	brcc	.+4      	; 0x3ef4a <main+0xa4>
   3ef46:	00 e0       	ldi	r16, 0x00	; 0
   3ef48:	10 e0       	ldi	r17, 0x00	; 0
			}
		#ifdef BLINK_LED_WHILE_WAITING
			if ((boot_timer % _BLINK_LOOP_COUNT_) == 0)
   3ef4a:	c5 01       	movw	r24, r10
   3ef4c:	b4 01       	movw	r22, r8
   3ef4e:	a7 01       	movw	r20, r14
   3ef50:	96 01       	movw	r18, r12
   3ef52:	ea d3       	rcall	.+2004   	; 0x3f728 <__udivmodsi4>
   3ef54:	dc 01       	movw	r26, r24
   3ef56:	cb 01       	movw	r24, r22
   3ef58:	00 97       	sbiw	r24, 0x00	; 0
   3ef5a:	a1 05       	cpc	r26, r1
   3ef5c:	b1 05       	cpc	r27, r1
   3ef5e:	19 f4       	brne	.+6      	; 0x3ef66 <main+0xc0>
   3ef60:	85 b1       	in	r24, 0x05	; 5
			{
				//*	toggle the LED
				PROGLED_PORT	^=	(1<<PROGLED_PIN);	// turn LED ON
   3ef62:	80 58       	subi	r24, 0x80	; 128
   3ef64:	85 b9       	out	0x05, r24	; 5
   3ef66:	80 91 c0 00 	lds	r24, 0x00C0


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3ef6a:	87 fd       	sbrc	r24, 7
//    sendchar(0x0a);
//    delay_ms(100);

	while (boot_state==0)
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
   3ef6c:	03 c0       	rjmp	.+6      	; 0x3ef74 <main+0xce>
   3ef6e:	01 15       	cp	r16, r1
   3ef70:	11 05       	cpc	r17, r1
   3ef72:	a9 f2       	breq	.-86     	; 0x3ef1e <main+0x78>
   3ef74:	c8 01       	movw	r24, r16
//    sendchar('.');
//    sendchar(0x0d);
//    sendchar(0x0a);
//    delay_ms(100);

	while (boot_state==0)
   3ef76:	01 96       	adiw	r24, 0x01	; 1
   3ef78:	81 30       	cpi	r24, 0x01	; 1
        
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
		}


	if (boot_state==1)
   3ef7a:	91 05       	cpc	r25, r1
   3ef7c:	09 f0       	breq	.+2      	; 0x3ef80 <main+0xda>
   3ef7e:	30 c3       	rjmp	.+1632   	; 0x3f5e0 <main+0x73a>
   3ef80:	ec c2       	rjmp	.+1496   	; 0x3f55a <main+0x6b4>
   3ef82:	80 e0       	ldi	r24, 0x00	; 0
   3ef84:	90 e0       	ldi	r25, 0x00	; 0
   3ef86:	81 30       	cpi	r24, 0x01	; 1
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
			{
				if (boot_state==1)
   3ef88:	91 05       	cpc	r25, r1
   3ef8a:	c9 f4       	brne	.+50     	; 0x3efbe <main+0x118>
   3ef8c:	1f c0       	rjmp	.+62     	; 0x3efcc <main+0x126>
   3ef8e:	01 96       	adiw	r24, 0x01	; 1
uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
	{
		// wait for data
		count++;
   3ef90:	a1 1d       	adc	r26, r1
   3ef92:	b1 1d       	adc	r27, r1
   3ef94:	81 30       	cpi	r24, 0x01	; 1
		if (count > MAX_TIME_COUNT)
   3ef96:	e2 e1       	ldi	r30, 0x12	; 18
   3ef98:	9e 07       	cpc	r25, r30
   3ef9a:	ea e7       	ldi	r30, 0x7A	; 122
   3ef9c:	ae 07       	cpc	r26, r30
   3ef9e:	e0 e0       	ldi	r30, 0x00	; 0
   3efa0:	be 07       	cpc	r27, r30
   3efa2:	80 f0       	brcs	.+32     	; 0x3efc4 <main+0x11e>
   3efa4:	c0 5d       	subi	r28, 0xD0	; 208
		#if (FLASHEND > 0x10000)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
		#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
		#endif
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
   3efa6:	de 4f       	sbci	r29, 0xFE	; 254
   3efa8:	88 81       	ld	r24, Y
   3efaa:	99 81       	ldd	r25, Y+1	; 0x01
   3efac:	c0 53       	subi	r28, 0x30	; 48
   3efae:	d1 40       	sbci	r29, 0x01	; 1
   3efb0:	af ef       	ldi	r26, 0xFF	; 255
   3efb2:	8f 3f       	cpi	r24, 0xFF	; 255
   3efb4:	9a 07       	cpc	r25, r26
   3efb6:	19 f0       	breq	.+6      	; 0x3efbe <main+0x118>
   3efb8:	ee 27       	eor	r30, r30
			{
				asm volatile(
   3efba:	ff 27       	eor	r31, r31
   3efbc:	09 94       	ijmp
   3efbe:	80 e0       	ldi	r24, 0x00	; 0
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
			{
				if (boot_state==1)
   3efc0:	90 e0       	ldi	r25, 0x00	; 0
   3efc2:	dc 01       	movw	r26, r24
   3efc4:	30 91 c0 00 	lds	r19, 0x00C0
//*****************************************************************************
static unsigned char recchar_timeout(void)
{
uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   3efc8:	37 ff       	sbrs	r19, 7
   3efca:	e1 cf       	rjmp	.-62     	; 0x3ef8e <main+0xe8>
   3efcc:	30 91 c6 00 	lds	r19, 0x00C6
						);
			}
			count	=	0;
		}
	}
	return UART_DATA_REG;
   3efd0:	08 94       	sec
					c	=	recchar_timeout();
					
				}

			#ifdef ENABLE_MONITOR
				rcvdCharCntr++;
   3efd2:	c1 1c       	adc	r12, r1
   3efd4:	d1 1c       	adc	r13, r1
   3efd6:	31 32       	cpi	r19, 0x21	; 33

				if ((c == '!')  && (rcvdCharCntr < 10))
   3efd8:	f1 f4       	brne	.+60     	; 0x3f016 <main+0x170>
   3efda:	ba e0       	ldi	r27, 0x0A	; 10
   3efdc:	cb 16       	cp	r12, r27
   3efde:	d1 04       	cpc	r13, r1
   3efe0:	d0 f4       	brcc	.+52     	; 0x3f016 <main+0x170>
   3efe2:	0f 5f       	subi	r16, 0xFF	; 255
				{
					exPointCntr++;
   3efe4:	1f 4f       	sbci	r17, 0xFF	; 255
   3efe6:	03 30       	cpi	r16, 0x03	; 3
					if (exPointCntr == 3)
   3efe8:	11 05       	cpc	r17, r1
   3efea:	b9 f4       	brne	.+46     	; 0x3f01a <main+0x174>
   3efec:	ca 5d       	subi	r28, 0xDA	; 218
   3efee:	de 4f       	sbci	r29, 0xFE	; 254
   3eff0:	d9 82       	std	Y+1, r13	; 0x01
   3eff2:	c8 82       	st	Y, r12
   3eff4:	c6 52       	subi	r28, 0x26	; 38
   3eff6:	d1 40       	sbci	r29, 0x01	; 1
   3eff8:	c8 5d       	subi	r28, 0xD8	; 216
   3effa:	de 4f       	sbci	r29, 0xFE	; 254
   3effc:	79 83       	std	Y+1, r23	; 0x01
   3effe:	68 83       	st	Y, r22
   3f000:	c8 52       	subi	r28, 0x28	; 40
   3f002:	d1 40       	sbci	r29, 0x01	; 1
   3f004:	cc 5d       	subi	r28, 0xDC	; 220
					{
						exPointCntr		=	0;	//	reset back to zero so we dont get in an endless loop
   3f006:	de 4f       	sbci	r29, 0xFE	; 254
   3f008:	19 82       	std	Y+1, r1	; 0x01
   3f00a:	18 82       	st	Y, r1
   3f00c:	c4 52       	subi	r28, 0x24	; 36
   3f00e:	d1 40       	sbci	r29, 0x01	; 1
   3f010:	22 24       	eor	r2, r2
						isLeave			=	1;
   3f012:	23 94       	inc	r2
   3f014:	57 c0       	rjmp	.+174    	; 0x3f0c4 <main+0x21e>
   3f016:	00 e0       	ldi	r16, 0x00	; 0
						break;
					}
				}
				else
				{
					exPointCntr	=	0;
   3f018:	10 e0       	ldi	r17, 0x00	; 0
   3f01a:	23 30       	cpi	r18, 0x03	; 3
				}
			#endif

				switch (msgParseState)
   3f01c:	d9 f0       	breq	.+54     	; 0x3f054 <main+0x1ae>
   3f01e:	24 30       	cpi	r18, 0x04	; 4
   3f020:	28 f4       	brcc	.+10     	; 0x3f02c <main+0x186>
   3f022:	21 30       	cpi	r18, 0x01	; 1
   3f024:	71 f0       	breq	.+28     	; 0x3f042 <main+0x19c>
   3f026:	22 30       	cpi	r18, 0x02	; 2
   3f028:	80 f4       	brcc	.+32     	; 0x3f04a <main+0x1a4>
   3f02a:	07 c0       	rjmp	.+14     	; 0x3f03a <main+0x194>
   3f02c:	25 30       	cpi	r18, 0x05	; 5
   3f02e:	09 f1       	breq	.+66     	; 0x3f072 <main+0x1cc>
   3f030:	25 30       	cpi	r18, 0x05	; 5
   3f032:	b8 f0       	brcs	.+46     	; 0x3f062 <main+0x1bc>
   3f034:	26 30       	cpi	r18, 0x06	; 6
   3f036:	81 f5       	brne	.+96     	; 0x3f098 <main+0x1f2>
   3f038:	2b c0       	rjmp	.+86     	; 0x3f090 <main+0x1ea>
   3f03a:	3b 31       	cpi	r19, 0x1B	; 27
				{
					case ST_START:
						if ( c == MESSAGE_START )
   3f03c:	09 f0       	breq	.+2      	; 0x3f040 <main+0x19a>
   3f03e:	a1 cf       	rjmp	.-190    	; 0x3ef82 <main+0xdc>
   3f040:	39 c3       	rjmp	.+1650   	; 0x3f6b4 <main+0x80e>
   3f042:	e3 26       	eor	r14, r19

					case ST_GET_SEQ_NUM:
					#ifdef _FIX_ISSUE_505_
						seqNum			=	c;
						msgParseState	=	ST_MSG_SIZE_1;
						checksum		^=	c;
   3f044:	33 2e       	mov	r3, r19
						else
						{
							msgParseState	=	ST_START;
						}
					#endif
						break;
   3f046:	22 e0       	ldi	r18, 0x02	; 2
						break;

					case ST_GET_SEQ_NUM:
					#ifdef _FIX_ISSUE_505_
						seqNum			=	c;
						msgParseState	=	ST_MSG_SIZE_1;
   3f048:	9c cf       	rjmp	.-200    	; 0x3ef82 <main+0xdc>
						else
						{
							msgParseState	=	ST_START;
						}
					#endif
						break;
   3f04a:	53 2f       	mov	r21, r19

					case ST_MSG_SIZE_1:
						msgLength		=	c<<8;
   3f04c:	40 e0       	ldi	r20, 0x00	; 0
   3f04e:	e3 26       	eor	r14, r19
						msgParseState	=	ST_MSG_SIZE_2;
						checksum		^=	c;
   3f050:	23 e0       	ldi	r18, 0x03	; 3
					#endif
						break;

					case ST_MSG_SIZE_1:
						msgLength		=	c<<8;
						msgParseState	=	ST_MSG_SIZE_2;
   3f052:	97 cf       	rjmp	.-210    	; 0x3ef82 <main+0xdc>
						checksum		^=	c;
						break;
   3f054:	83 2f       	mov	r24, r19

					case ST_MSG_SIZE_2:
						msgLength		|=	c;
   3f056:	90 e0       	ldi	r25, 0x00	; 0
   3f058:	48 2b       	or	r20, r24
   3f05a:	59 2b       	or	r21, r25
   3f05c:	e3 26       	eor	r14, r19
						msgParseState	=	ST_GET_TOKEN;
						checksum		^=	c;
   3f05e:	24 e0       	ldi	r18, 0x04	; 4
						checksum		^=	c;
						break;

					case ST_MSG_SIZE_2:
						msgLength		|=	c;
						msgParseState	=	ST_GET_TOKEN;
   3f060:	90 cf       	rjmp	.-224    	; 0x3ef82 <main+0xdc>
						checksum		^=	c;
						break;
   3f062:	3e 30       	cpi	r19, 0x0E	; 14

					case ST_GET_TOKEN:
						if ( c == TOKEN )
   3f064:	09 f0       	breq	.+2      	; 0x3f068 <main+0x1c2>
   3f066:	2a c3       	rjmp	.+1620   	; 0x3f6bc <main+0x816>
   3f068:	e3 26       	eor	r14, r19
						{
							msgParseState	=	ST_GET_DATA;
							checksum		^=	c;
   3f06a:	60 e0       	ldi	r22, 0x00	; 0
							ii				=	0;
   3f06c:	70 e0       	ldi	r23, 0x00	; 0
   3f06e:	25 e0       	ldi	r18, 0x05	; 5
						break;

					case ST_GET_TOKEN:
						if ( c == TOKEN )
						{
							msgParseState	=	ST_GET_DATA;
   3f070:	88 cf       	rjmp	.-240    	; 0x3ef82 <main+0xdc>
   3f072:	e3 e0       	ldi	r30, 0x03	; 3
							msgParseState	=	ST_START;
						}
						break;

					case ST_GET_DATA:
						msgBuffer[ii++]	=	c;
   3f074:	f0 e0       	ldi	r31, 0x00	; 0
   3f076:	ec 0f       	add	r30, r28
   3f078:	fd 1f       	adc	r31, r29
   3f07a:	e6 0f       	add	r30, r22
   3f07c:	f7 1f       	adc	r31, r23
   3f07e:	30 83       	st	Z, r19
   3f080:	6f 5f       	subi	r22, 0xFF	; 255
   3f082:	7f 4f       	sbci	r23, 0xFF	; 255
   3f084:	e3 26       	eor	r14, r19
						checksum		^=	c;
   3f086:	64 17       	cp	r22, r20
						if (ii == msgLength )
   3f088:	75 07       	cpc	r23, r21
   3f08a:	09 f0       	breq	.+2      	; 0x3f08e <main+0x1e8>
   3f08c:	7a cf       	rjmp	.-268    	; 0x3ef82 <main+0xdc>
   3f08e:	18 c3       	rjmp	.+1584   	; 0x3f6c0 <main+0x81a>
   3f090:	3e 15       	cp	r19, r14
							msgParseState	=	ST_GET_CHECK;
						}
						break;

					case ST_GET_CHECK:
						if ( c == checksum )
   3f092:	09 f0       	breq	.+2      	; 0x3f096 <main+0x1f0>
   3f094:	13 c3       	rjmp	.+1574   	; 0x3f6bc <main+0x816>
   3f096:	03 c0       	rjmp	.+6      	; 0x3f09e <main+0x1f8>
   3f098:	27 30       	cpi	r18, 0x07	; 7
		{
			/*
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
   3f09a:	09 f0       	breq	.+2      	; 0x3f09e <main+0x1f8>
   3f09c:	72 cf       	rjmp	.-284    	; 0x3ef82 <main+0xdc>
   3f09e:	cc 5d       	subi	r28, 0xDC	; 220
   3f0a0:	de 4f       	sbci	r29, 0xFE	; 254
   3f0a2:	19 83       	std	Y+1, r17	; 0x01
   3f0a4:	08 83       	st	Y, r16
   3f0a6:	c4 52       	subi	r28, 0x24	; 36
   3f0a8:	d1 40       	sbci	r29, 0x01	; 1
   3f0aa:	ca 5d       	subi	r28, 0xDA	; 218
   3f0ac:	de 4f       	sbci	r29, 0xFE	; 254
   3f0ae:	d9 82       	std	Y+1, r13	; 0x01
   3f0b0:	c8 82       	st	Y, r12
   3f0b2:	c6 52       	subi	r28, 0x26	; 38
   3f0b4:	d1 40       	sbci	r29, 0x01	; 1
   3f0b6:	c8 5d       	subi	r28, 0xD8	; 216
   3f0b8:	de 4f       	sbci	r29, 0xFE	; 254
   3f0ba:	79 83       	std	Y+1, r23	; 0x01
   3f0bc:	68 83       	st	Y, r22
   3f0be:	c8 52       	subi	r28, 0x28	; 40
   3f0c0:	d1 40       	sbci	r29, 0x01	; 1
   3f0c2:	22 24       	eor	r2, r2
							msgParseState	=	ST_GET_CHECK;
						}
						break;

					case ST_GET_CHECK:
						if ( c == checksum )
   3f0c4:	8b 81       	ldd	r24, Y+3	; 0x03

			/*
			 * Now process the STK500 commands, see Atmel Appnote AVR068
			 */

			switch (msgBuffer[0])
   3f0c6:	83 31       	cpi	r24, 0x13	; 19
   3f0c8:	09 f4       	brne	.+2      	; 0x3f0cc <main+0x226>
   3f0ca:	02 c1       	rjmp	.+516    	; 0x3f2d0 <main+0x42a>
   3f0cc:	84 31       	cpi	r24, 0x14	; 20
   3f0ce:	c8 f4       	brcc	.+50     	; 0x3f102 <main+0x25c>
   3f0d0:	86 30       	cpi	r24, 0x06	; 6
   3f0d2:	09 f4       	brne	.+2      	; 0x3f0d6 <main+0x230>
   3f0d4:	d0 c0       	rjmp	.+416    	; 0x3f276 <main+0x3d0>
   3f0d6:	87 30       	cpi	r24, 0x07	; 7
   3f0d8:	50 f4       	brcc	.+20     	; 0x3f0ee <main+0x248>
   3f0da:	82 30       	cpi	r24, 0x02	; 2
   3f0dc:	09 f4       	brne	.+2      	; 0x3f0e0 <main+0x23a>
   3f0de:	f6 c0       	rjmp	.+492    	; 0x3f2cc <main+0x426>
   3f0e0:	83 30       	cpi	r24, 0x03	; 3
   3f0e2:	09 f4       	brne	.+2      	; 0x3f0e6 <main+0x240>
   3f0e4:	6a c0       	rjmp	.+212    	; 0x3f1ba <main+0x314>
   3f0e6:	81 30       	cpi	r24, 0x01	; 1
   3f0e8:	09 f0       	breq	.+2      	; 0x3f0ec <main+0x246>
   3f0ea:	fe c1       	rjmp	.+1020   	; 0x3f4e8 <main+0x642>
   3f0ec:	4f c0       	rjmp	.+158    	; 0x3f18c <main+0x2e6>
   3f0ee:	81 31       	cpi	r24, 0x11	; 17
   3f0f0:	09 f4       	brne	.+2      	; 0x3f0f4 <main+0x24e>
   3f0f2:	70 c0       	rjmp	.+224    	; 0x3f1d4 <main+0x32e>
   3f0f4:	82 31       	cpi	r24, 0x12	; 18
   3f0f6:	08 f0       	brcs	.+2      	; 0x3f0fa <main+0x254>
   3f0f8:	b0 c0       	rjmp	.+352    	; 0x3f25a <main+0x3b4>
   3f0fa:	80 31       	cpi	r24, 0x10	; 16
   3f0fc:	09 f0       	breq	.+2      	; 0x3f100 <main+0x25a>
   3f0fe:	f4 c1       	rjmp	.+1000   	; 0x3f4e8 <main+0x642>
   3f100:	e5 c0       	rjmp	.+458    	; 0x3f2cc <main+0x426>
   3f102:	88 31       	cpi	r24, 0x18	; 24
   3f104:	09 f4       	brne	.+2      	; 0x3f108 <main+0x262>
   3f106:	83 c0       	rjmp	.+262    	; 0x3f20e <main+0x368>
   3f108:	89 31       	cpi	r24, 0x19	; 25
   3f10a:	50 f4       	brcc	.+20     	; 0x3f120 <main+0x27a>
   3f10c:	85 31       	cpi	r24, 0x15	; 21
   3f10e:	09 f4       	brne	.+2      	; 0x3f112 <main+0x26c>
   3f110:	df c0       	rjmp	.+446    	; 0x3f2d0 <main+0x42a>
   3f112:	85 31       	cpi	r24, 0x15	; 21
   3f114:	08 f4       	brcc	.+2      	; 0x3f118 <main+0x272>
   3f116:	88 c1       	rjmp	.+784    	; 0x3f428 <main+0x582>
   3f118:	86 31       	cpi	r24, 0x16	; 22
   3f11a:	09 f0       	breq	.+2      	; 0x3f11e <main+0x278>
   3f11c:	e5 c1       	rjmp	.+970    	; 0x3f4e8 <main+0x642>
   3f11e:	84 c1       	rjmp	.+776    	; 0x3f428 <main+0x582>
   3f120:	8a 31       	cpi	r24, 0x1A	; 26
   3f122:	09 f4       	brne	.+2      	; 0x3f126 <main+0x280>
   3f124:	67 c0       	rjmp	.+206    	; 0x3f1f4 <main+0x34e>
   3f126:	8a 31       	cpi	r24, 0x1A	; 26
   3f128:	08 f4       	brcc	.+2      	; 0x3f12c <main+0x286>
   3f12a:	85 c0       	rjmp	.+266    	; 0x3f236 <main+0x390>
   3f12c:	8b 31       	cpi	r24, 0x1B	; 27
   3f12e:	09 f4       	brne	.+2      	; 0x3f132 <main+0x28c>
   3f130:	54 c0       	rjmp	.+168    	; 0x3f1da <main+0x334>
   3f132:	8d 31       	cpi	r24, 0x1D	; 29
   3f134:	09 f0       	breq	.+2      	; 0x3f138 <main+0x292>
   3f136:	d8 c1       	rjmp	.+944    	; 0x3f4e8 <main+0x642>
   3f138:	8f 81       	ldd	r24, Y+7	; 0x07
				case CMD_SPI_MULTI:
					{
						unsigned char answerByte;
						unsigned char flag=0;

						if ( msgBuffer[4]== 0x30 )
   3f13a:	80 33       	cpi	r24, 0x30	; 48
   3f13c:	39 f4       	brne	.+14     	; 0x3f14c <main+0x2a6>
   3f13e:	99 85       	ldd	r25, Y+9	; 0x09
						{
							unsigned char signatureIndex	=	msgBuffer[6];
   3f140:	99 23       	and	r25, r25

							if ( signatureIndex == 0 )
   3f142:	a9 f0       	breq	.+42     	; 0x3f16e <main+0x2c8>
   3f144:	91 30       	cpi	r25, 0x01	; 1
							{
								answerByte	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
							}
							else if ( signatureIndex == 1 )
   3f146:	a9 f4       	brne	.+42     	; 0x3f172 <main+0x2cc>
   3f148:	e8 e9       	ldi	r30, 0x98	; 152
							{
								answerByte	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
   3f14a:	16 c0       	rjmp	.+44     	; 0x3f178 <main+0x2d2>
   3f14c:	98 2f       	mov	r25, r24
							else
							{
								answerByte	=	SIGNATURE_BYTES & 0x000000FF;
							}
						}
						else if ( msgBuffer[4] & 0x50 )
   3f14e:	90 75       	andi	r25, 0x50	; 80
   3f150:	91 f0       	breq	.+36     	; 0x3f176 <main+0x2d0>
   3f152:	80 35       	cpi	r24, 0x50	; 80
						//*	Issue 544: 	stk500v2 bootloader doesn't support reading fuses
						//*	I cant find the docs that say what these are supposed to be but this was figured out by trial and error
						//	answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
						//	answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
						//	answerByte	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
							if (msgBuffer[4] == 0x50)
   3f154:	19 f4       	brne	.+6      	; 0x3f15c <main+0x2b6>
   3f156:	e0 e0       	ldi	r30, 0x00	; 0
							{
								answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   3f158:	f0 e0       	ldi	r31, 0x00	; 0
   3f15a:	04 c0       	rjmp	.+8      	; 0x3f164 <main+0x2be>
   3f15c:	88 35       	cpi	r24, 0x58	; 88
							}
							else if (msgBuffer[4] == 0x58)
   3f15e:	59 f4       	brne	.+22     	; 0x3f176 <main+0x2d0>
   3f160:	e3 e0       	ldi	r30, 0x03	; 3
							{
								answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   3f162:	f0 e0       	ldi	r31, 0x00	; 0
   3f164:	99 e0       	ldi	r25, 0x09	; 9
   3f166:	90 93 57 00 	sts	0x0057, r25
   3f16a:	e4 91       	lpm	r30, Z
   3f16c:	05 c0       	rjmp	.+10     	; 0x3f178 <main+0x2d2>
   3f16e:	ee e1       	ldi	r30, 0x1E	; 30
						{
							unsigned char signatureIndex	=	msgBuffer[6];

							if ( signatureIndex == 0 )
							{
								answerByte	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
   3f170:	03 c0       	rjmp	.+6      	; 0x3f178 <main+0x2d2>
   3f172:	e1 e0       	ldi	r30, 0x01	; 1
							{
								answerByte	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
							}
							else
							{
								answerByte	=	SIGNATURE_BYTES & 0x000000FF;
   3f174:	01 c0       	rjmp	.+2      	; 0x3f178 <main+0x2d2>
   3f176:	e0 e0       	ldi	r30, 0x00	; 0
							{
								answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
							}
							else
							{
								answerByte	=	0;
   3f178:	1c 82       	std	Y+4, r1	; 0x04
							answerByte	=	0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
						}
						if ( !flag )
						{
							msgLength		=	7;
							msgBuffer[1]	=	STATUS_CMD_OK;
   3f17a:	1d 82       	std	Y+5, r1	; 0x05
							msgBuffer[2]	=	0;
   3f17c:	8e 83       	std	Y+6, r24	; 0x06
							msgBuffer[3]	=	msgBuffer[4];
   3f17e:	1f 82       	std	Y+7, r1	; 0x07
							msgBuffer[4]	=	0;
   3f180:	e8 87       	std	Y+8, r30	; 0x08
							msgBuffer[5]	=	answerByte;
   3f182:	19 86       	std	Y+9, r1	; 0x09
							msgBuffer[6]	=	STATUS_CMD_OK;
   3f184:	b7 e0       	ldi	r27, 0x07	; 7
						{
							answerByte	=	0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
						}
						if ( !flag )
						{
							msgLength		=	7;
   3f186:	cb 2e       	mov	r12, r27
   3f188:	d1 2c       	mov	r13, r1
   3f18a:	b3 c1       	rjmp	.+870    	; 0x3f4f2 <main+0x64c>
   3f18c:	1c 82       	std	Y+4, r1	; 0x04
					}
					break;
	#endif
				case CMD_SIGN_ON:
					msgLength		=	11;
					msgBuffer[1] 	=	STATUS_CMD_OK;
   3f18e:	88 e0       	ldi	r24, 0x08	; 8
					msgBuffer[2] 	=	8;
   3f190:	8d 83       	std	Y+5, r24	; 0x05
   3f192:	81 e4       	ldi	r24, 0x41	; 65
					msgBuffer[3] 	=	'A';
   3f194:	8e 83       	std	Y+6, r24	; 0x06
   3f196:	86 e5       	ldi	r24, 0x56	; 86
					msgBuffer[4] 	=	'V';
   3f198:	8f 83       	std	Y+7, r24	; 0x07
   3f19a:	82 e5       	ldi	r24, 0x52	; 82
					msgBuffer[5] 	=	'R';
   3f19c:	88 87       	std	Y+8, r24	; 0x08
   3f19e:	89 e4       	ldi	r24, 0x49	; 73
					msgBuffer[6] 	=	'I';
   3f1a0:	89 87       	std	Y+9, r24	; 0x09
   3f1a2:	83 e5       	ldi	r24, 0x53	; 83
					msgBuffer[7] 	=	'S';
   3f1a4:	8a 87       	std	Y+10, r24	; 0x0a
   3f1a6:	80 e5       	ldi	r24, 0x50	; 80
					msgBuffer[8] 	=	'P';
   3f1a8:	8b 87       	std	Y+11, r24	; 0x0b
   3f1aa:	8f e5       	ldi	r24, 0x5F	; 95
					msgBuffer[9] 	=	'_';
   3f1ac:	8c 87       	std	Y+12, r24	; 0x0c
   3f1ae:	82 e3       	ldi	r24, 0x32	; 50
					msgBuffer[10]	=	'2';
   3f1b0:	8d 87       	std	Y+13, r24	; 0x0d
   3f1b2:	ab e0       	ldi	r26, 0x0B	; 11
						}
					}
					break;
	#endif
				case CMD_SIGN_ON:
					msgLength		=	11;
   3f1b4:	ca 2e       	mov	r12, r26
   3f1b6:	d1 2c       	mov	r13, r1
   3f1b8:	9c c1       	rjmp	.+824    	; 0x3f4f2 <main+0x64c>
					msgBuffer[6] 	=	'I';
					msgBuffer[7] 	=	'S';
					msgBuffer[8] 	=	'P';
					msgBuffer[9] 	=	'_';
					msgBuffer[10]	=	'2';
					break;
   3f1ba:	ec 81       	ldd	r30, Y+4	; 0x04
   3f1bc:	e0 59       	subi	r30, 0x90	; 144
   3f1be:	e3 30       	cpi	r30, 0x03	; 3
   3f1c0:	28 f4       	brcc	.+10     	; 0x3f1cc <main+0x326>
   3f1c2:	f0 e0       	ldi	r31, 0x00	; 0
   3f1c4:	e2 5f       	subi	r30, 0xF2	; 242
   3f1c6:	fd 4f       	sbci	r31, 0xFD	; 253
   3f1c8:	80 81       	ld	r24, Z
   3f1ca:	01 c0       	rjmp	.+2      	; 0x3f1ce <main+0x328>
   3f1cc:	80 e0       	ldi	r24, 0x00	; 0

				case CMD_GET_PARAMETER:
					{
						unsigned char value;

						switch(msgBuffer[1])
   3f1ce:	1c 82       	std	Y+4, r1	; 0x04
						default:
							value	=	0;
							break;
						}
						msgLength		=	3;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f1d0:	8d 83       	std	Y+5, r24	; 0x05
						msgBuffer[2]	=	value;
   3f1d2:	3f c0       	rjmp	.+126    	; 0x3f252 <main+0x3ac>
   3f1d4:	22 24       	eor	r2, r2
					}
					break;

				case CMD_LEAVE_PROGMODE_ISP:
					isLeave	=	1;
   3f1d6:	23 94       	inc	r2
   3f1d8:	79 c0       	rjmp	.+242    	; 0x3f2cc <main+0x426>
   3f1da:	8f 81       	ldd	r24, Y+7	; 0x07
					msgBuffer[1]	=	STATUS_CMD_OK;
					break;

				case CMD_READ_SIGNATURE_ISP:
					{
						unsigned char signatureIndex	=	msgBuffer[4];
   3f1dc:	88 23       	and	r24, r24
						unsigned char signature;

						if ( signatureIndex == 0 )
   3f1de:	21 f0       	breq	.+8      	; 0x3f1e8 <main+0x342>
   3f1e0:	81 30       	cpi	r24, 0x01	; 1
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
						else if ( signatureIndex == 1 )
   3f1e2:	21 f4       	brne	.+8      	; 0x3f1ec <main+0x346>
   3f1e4:	88 e9       	ldi	r24, 0x98	; 152
							signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
   3f1e6:	03 c0       	rjmp	.+6      	; 0x3f1ee <main+0x348>
   3f1e8:	8e e1       	ldi	r24, 0x1E	; 30
					{
						unsigned char signatureIndex	=	msgBuffer[4];
						unsigned char signature;

						if ( signatureIndex == 0 )
							signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
   3f1ea:	01 c0       	rjmp	.+2      	; 0x3f1ee <main+0x348>
   3f1ec:	81 e0       	ldi	r24, 0x01	; 1
						else if ( signatureIndex == 1 )
							signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
						else
							signature	=	SIGNATURE_BYTES & 0x000000FF;
   3f1ee:	1c 82       	std	Y+4, r1	; 0x04

						msgLength		=	4;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f1f0:	8d 83       	std	Y+5, r24	; 0x05
						msgBuffer[2]	=	signature;
   3f1f2:	08 c0       	rjmp	.+16     	; 0x3f204 <main+0x35e>
   3f1f4:	1c 82       	std	Y+4, r1	; 0x04
					}
					break;

				case CMD_READ_LOCK_ISP:
					msgLength		=	4;
					msgBuffer[1]	=	STATUS_CMD_OK;
   3f1f6:	e1 e0       	ldi	r30, 0x01	; 1
					msgBuffer[2]	=	boot_lock_fuse_bits_get( GET_LOCK_BITS );
   3f1f8:	f0 e0       	ldi	r31, 0x00	; 0
   3f1fa:	89 e0       	ldi	r24, 0x09	; 9
   3f1fc:	80 93 57 00 	sts	0x0057, r24
   3f200:	e4 91       	lpm	r30, Z
   3f202:	ed 83       	std	Y+5, r30	; 0x05
   3f204:	1e 82       	std	Y+6, r1	; 0x06
					msgBuffer[3]	=	STATUS_CMD_OK;
   3f206:	f4 e0       	ldi	r31, 0x04	; 4
						msgBuffer[3]	=	STATUS_CMD_OK;
					}
					break;

				case CMD_READ_LOCK_ISP:
					msgLength		=	4;
   3f208:	cf 2e       	mov	r12, r31
   3f20a:	d1 2c       	mov	r13, r1
   3f20c:	72 c1       	rjmp	.+740    	; 0x3f4f2 <main+0x64c>
					msgBuffer[1]	=	STATUS_CMD_OK;
					msgBuffer[2]	=	boot_lock_fuse_bits_get( GET_LOCK_BITS );
					msgBuffer[3]	=	STATUS_CMD_OK;
					break;
   3f20e:	8d 81       	ldd	r24, Y+5	; 0x05

				case CMD_READ_FUSE_ISP:
					{
						unsigned char fuseBits;

						if ( msgBuffer[2] == 0x50 )
   3f210:	80 35       	cpi	r24, 0x50	; 80
   3f212:	49 f4       	brne	.+18     	; 0x3f226 <main+0x380>
   3f214:	8e 81       	ldd	r24, Y+6	; 0x06
						{
							if ( msgBuffer[3] == 0x08 )
   3f216:	88 30       	cpi	r24, 0x08	; 8
   3f218:	19 f4       	brne	.+6      	; 0x3f220 <main+0x37a>
   3f21a:	e2 e0       	ldi	r30, 0x02	; 2
								fuseBits	=	boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
   3f21c:	f0 e0       	ldi	r31, 0x00	; 0
   3f21e:	05 c0       	rjmp	.+10     	; 0x3f22a <main+0x384>
   3f220:	e0 e0       	ldi	r30, 0x00	; 0
							else
								fuseBits	=	boot_lock_fuse_bits_get( GET_LOW_FUSE_BITS );
   3f222:	f0 e0       	ldi	r31, 0x00	; 0
   3f224:	02 c0       	rjmp	.+4      	; 0x3f22a <main+0x384>
   3f226:	e3 e0       	ldi	r30, 0x03	; 3
						}
						else
						{
							fuseBits	=	boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
   3f228:	f0 e0       	ldi	r31, 0x00	; 0
   3f22a:	89 e0       	ldi	r24, 0x09	; 9
   3f22c:	80 93 57 00 	sts	0x0057, r24
   3f230:	e4 91       	lpm	r30, Z
   3f232:	1c 82       	std	Y+4, r1	; 0x04
						}
						msgLength		=	4;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f234:	e6 cf       	rjmp	.-52     	; 0x3f202 <main+0x35c>
   3f236:	8f 81       	ldd	r24, Y+7	; 0x07
	#ifndef REMOVE_PROGRAM_LOCK_BIT_SUPPORT
				case CMD_PROGRAM_LOCK_ISP:
					{
						unsigned char lockBits	=	msgBuffer[4];

						lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
   3f238:	83 6c       	ori	r24, 0xC3	; 195
						boot_lock_bits_set(lockBits);		// and program it
   3f23a:	99 e0       	ldi	r25, 0x09	; 9
   3f23c:	e1 e0       	ldi	r30, 0x01	; 1
   3f23e:	f0 e0       	ldi	r31, 0x00	; 0
   3f240:	08 2e       	mov	r0, r24
   3f242:	90 93 57 00 	sts	0x0057, r25
   3f246:	e8 95       	spm
   3f248:	07 b6       	in	r0, 0x37	; 55
						boot_spm_busy_wait();
   3f24a:	00 fc       	sbrc	r0, 0
   3f24c:	fd cf       	rjmp	.-6      	; 0x3f248 <main+0x3a2>
   3f24e:	1c 82       	std	Y+4, r1	; 0x04

						msgLength		=	3;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f250:	1d 82       	std	Y+5, r1	; 0x05
						msgBuffer[2]	=	STATUS_CMD_OK;
   3f252:	e3 e0       	ldi	r30, 0x03	; 3

						lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
						boot_lock_bits_set(lockBits);		// and program it
						boot_spm_busy_wait();

						msgLength		=	3;
   3f254:	ce 2e       	mov	r12, r30
   3f256:	d1 2c       	mov	r13, r1
   3f258:	4c c1       	rjmp	.+664    	; 0x3f4f2 <main+0x64c>
						msgBuffer[1]	=	STATUS_CMD_OK;
						msgBuffer[2]	=	STATUS_CMD_OK;
					}
					break;
   3f25a:	80 ec       	ldi	r24, 0xC0	; 192
	#endif
				case CMD_CHIP_ERASE_ISP:
					eraseAddress	=	0;
					msgLength		=	2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
					msgBuffer[1]	=	STATUS_CMD_FAILED;	//*	isue 543, return FAILED instead of OK
   3f25c:	8c 83       	std	Y+4, r24	; 0x04
   3f25e:	72 e0       	ldi	r23, 0x02	; 2
					}
					break;
	#endif
				case CMD_CHIP_ERASE_ISP:
					eraseAddress	=	0;
					msgLength		=	2;
   3f260:	c7 2e       	mov	r12, r23
   3f262:	d1 2c       	mov	r13, r1
   3f264:	c0 5e       	subi	r28, 0xE0	; 224
						msgBuffer[2]	=	STATUS_CMD_OK;
					}
					break;
	#endif
				case CMD_CHIP_ERASE_ISP:
					eraseAddress	=	0;
   3f266:	de 4f       	sbci	r29, 0xFE	; 254
   3f268:	18 82       	st	Y, r1
   3f26a:	19 82       	std	Y+1, r1	; 0x01
   3f26c:	1a 82       	std	Y+2, r1	; 0x02
   3f26e:	1b 82       	std	Y+3, r1	; 0x03
   3f270:	c0 52       	subi	r28, 0x20	; 32
   3f272:	d1 40       	sbci	r29, 0x01	; 1
   3f274:	3e c1       	rjmp	.+636    	; 0x3f4f2 <main+0x64c>
					msgLength		=	2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
					msgBuffer[1]	=	STATUS_CMD_FAILED;	//*	isue 543, return FAILED instead of OK
					break;
   3f276:	8c 81       	ldd	r24, Y+4	; 0x04

				case CMD_LOAD_ADDRESS:
	#if defined(RAMPZ)
					address	=	( ((address_t)(msgBuffer[1])<<24)|((address_t)(msgBuffer[2])<<16)|((address_t)(msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;
   3f278:	90 e0       	ldi	r25, 0x00	; 0
   3f27a:	a0 e0       	ldi	r26, 0x00	; 0
   3f27c:	b0 e0       	ldi	r27, 0x00	; 0
   3f27e:	78 2e       	mov	r7, r24
   3f280:	66 24       	eor	r6, r6
   3f282:	55 24       	eor	r5, r5
   3f284:	44 24       	eor	r4, r4
   3f286:	8d 81       	ldd	r24, Y+5	; 0x05
   3f288:	90 e0       	ldi	r25, 0x00	; 0
   3f28a:	a0 e0       	ldi	r26, 0x00	; 0
   3f28c:	b0 e0       	ldi	r27, 0x00	; 0
   3f28e:	dc 01       	movw	r26, r24
   3f290:	99 27       	eor	r25, r25
   3f292:	88 27       	eor	r24, r24
   3f294:	48 2a       	or	r4, r24
   3f296:	59 2a       	or	r5, r25
   3f298:	6a 2a       	or	r6, r26
   3f29a:	7b 2a       	or	r7, r27
   3f29c:	8f 81       	ldd	r24, Y+7	; 0x07
   3f29e:	90 e0       	ldi	r25, 0x00	; 0
   3f2a0:	a0 e0       	ldi	r26, 0x00	; 0
   3f2a2:	b0 e0       	ldi	r27, 0x00	; 0
   3f2a4:	48 2a       	or	r4, r24
   3f2a6:	59 2a       	or	r5, r25
   3f2a8:	6a 2a       	or	r6, r26
   3f2aa:	7b 2a       	or	r7, r27
   3f2ac:	8e 81       	ldd	r24, Y+6	; 0x06
   3f2ae:	90 e0       	ldi	r25, 0x00	; 0
   3f2b0:	a0 e0       	ldi	r26, 0x00	; 0
   3f2b2:	b0 e0       	ldi	r27, 0x00	; 0
   3f2b4:	ba 2f       	mov	r27, r26
   3f2b6:	a9 2f       	mov	r26, r25
   3f2b8:	98 2f       	mov	r25, r24
   3f2ba:	88 27       	eor	r24, r24
   3f2bc:	48 2a       	or	r4, r24
   3f2be:	59 2a       	or	r5, r25
   3f2c0:	6a 2a       	or	r6, r26
   3f2c2:	7b 2a       	or	r7, r27
   3f2c4:	44 0c       	add	r4, r4
   3f2c6:	55 1c       	adc	r5, r5
   3f2c8:	66 1c       	adc	r6, r6
   3f2ca:	77 1c       	adc	r7, r7
   3f2cc:	1c 82       	std	Y+4, r1	; 0x04
	#else
					address	=	( ((msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;		//convert word to byte address
	#endif
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_OK;
   3f2ce:	0e c1       	rjmp	.+540    	; 0x3f4ec <main+0x646>
   3f2d0:	ec 81       	ldd	r30, Y+4	; 0x04
					break;

				case CMD_PROGRAM_FLASH_ISP:
				case CMD_PROGRAM_EEPROM_ISP:
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
   3f2d2:	c5 5d       	subi	r28, 0xD5	; 213
   3f2d4:	de 4f       	sbci	r29, 0xFE	; 254
   3f2d6:	e8 83       	st	Y, r30
   3f2d8:	cb 52       	subi	r28, 0x2B	; 43
   3f2da:	d1 40       	sbci	r29, 0x01	; 1
   3f2dc:	c6 5d       	subi	r28, 0xD6	; 214
   3f2de:	de 4f       	sbci	r29, 0xFE	; 254
   3f2e0:	18 82       	st	Y, r1
   3f2e2:	ca 52       	subi	r28, 0x2A	; 42
   3f2e4:	d1 40       	sbci	r29, 0x01	; 1
   3f2e6:	cd 80       	ldd	r12, Y+5	; 0x05
   3f2e8:	dd 24       	eor	r13, r13
   3f2ea:	c6 5d       	subi	r28, 0xD6	; 214
   3f2ec:	de 4f       	sbci	r29, 0xFE	; 254
   3f2ee:	28 81       	ld	r18, Y
   3f2f0:	39 81       	ldd	r19, Y+1	; 0x01
   3f2f2:	ca 52       	subi	r28, 0x2A	; 42
   3f2f4:	d1 40       	sbci	r29, 0x01	; 1
   3f2f6:	c2 2a       	or	r12, r18
   3f2f8:	d3 2a       	or	r13, r19
   3f2fa:	83 31       	cpi	r24, 0x13	; 19
						unsigned int	data;
						unsigned char	highByte, lowByte;
                        address_t		tempaddress	=	address;


						if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
   3f2fc:	09 f0       	breq	.+2      	; 0x3f300 <main+0x45a>
   3f2fe:	6c c0       	rjmp	.+216    	; 0x3f3d8 <main+0x532>
   3f300:	c0 5e       	subi	r28, 0xE0	; 224
						{
							// erase only main section (bootloader protection)
							if (eraseAddress < APP_END )
   3f302:	de 4f       	sbci	r29, 0xFE	; 254
   3f304:	28 81       	ld	r18, Y
   3f306:	39 81       	ldd	r19, Y+1	; 0x01
   3f308:	4a 81       	ldd	r20, Y+2	; 0x02
   3f30a:	5b 81       	ldd	r21, Y+3	; 0x03
   3f30c:	c0 52       	subi	r28, 0x20	; 32
   3f30e:	d1 40       	sbci	r29, 0x01	; 1
   3f310:	20 30       	cpi	r18, 0x00	; 0
   3f312:	80 ec       	ldi	r24, 0xC0	; 192
   3f314:	38 07       	cpc	r19, r24
   3f316:	83 e0       	ldi	r24, 0x03	; 3
   3f318:	48 07       	cpc	r20, r24
   3f31a:	80 e0       	ldi	r24, 0x00	; 0
   3f31c:	58 07       	cpc	r21, r24
   3f31e:	f0 f4       	brcc	.+60     	; 0x3f35c <main+0x4b6>
   3f320:	83 e0       	ldi	r24, 0x03	; 3
							{
								boot_page_erase(eraseAddress);	// Perform page erase
   3f322:	f9 01       	movw	r30, r18
   3f324:	40 93 5b 00 	sts	0x005B, r20
   3f328:	80 93 57 00 	sts	0x0057, r24
   3f32c:	e8 95       	spm
   3f32e:	07 b6       	in	r0, 0x37	; 55
								boot_spm_busy_wait();		// Wait until the memory is erased.
   3f330:	00 fc       	sbrc	r0, 0
   3f332:	fd cf       	rjmp	.-6      	; 0x3f32e <main+0x488>
   3f334:	c0 5e       	subi	r28, 0xE0	; 224
								eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
   3f336:	de 4f       	sbci	r29, 0xFE	; 254
   3f338:	28 81       	ld	r18, Y
   3f33a:	39 81       	ldd	r19, Y+1	; 0x01
   3f33c:	4a 81       	ldd	r20, Y+2	; 0x02
   3f33e:	5b 81       	ldd	r21, Y+3	; 0x03
   3f340:	c0 52       	subi	r28, 0x20	; 32
   3f342:	d1 40       	sbci	r29, 0x01	; 1
   3f344:	20 50       	subi	r18, 0x00	; 0
   3f346:	3f 4f       	sbci	r19, 0xFF	; 255
   3f348:	4f 4f       	sbci	r20, 0xFF	; 255
   3f34a:	5f 4f       	sbci	r21, 0xFF	; 255
   3f34c:	c0 5e       	subi	r28, 0xE0	; 224
   3f34e:	de 4f       	sbci	r29, 0xFE	; 254
   3f350:	28 83       	st	Y, r18
   3f352:	39 83       	std	Y+1, r19	; 0x01
   3f354:	4a 83       	std	Y+2, r20	; 0x02
   3f356:	5b 83       	std	Y+3, r21	; 0x03
   3f358:	c0 52       	subi	r28, 0x20	; 32
   3f35a:	d1 40       	sbci	r29, 0x01	; 1
   3f35c:	8d 85       	ldd	r24, Y+13	; 0x0d
   3f35e:	de 01       	movw	r26, r28
   3f360:	1f 96       	adiw	r26, 0x0f	; 15
   3f362:	93 01       	movw	r18, r6
						unsigned char fuseBits;

						if ( msgBuffer[2] == 0x50 )
						{
							if ( msgBuffer[3] == 0x08 )
								fuseBits	=	boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
   3f364:	82 01       	movw	r16, r4
   3f366:	41 e0       	ldi	r20, 0x01	; 1
							do {
								lowByte		=	*p++;
								highByte 	=	*p++;

								data		=	(highByte << 8) | lowByte;
								boot_page_fill(address,data);
   3f368:	b6 01       	movw	r22, r12
   3f36a:	fd 01       	movw	r30, r26
void (*app_start)(void) = 0;
uint8_t check = 1;


//*****************************************************************************
int main(void)
   3f36c:	31 97       	sbiw	r30, 0x01	; 1
   3f36e:	50 81       	ld	r21, Z
							/* Write FLASH */
							do {
								lowByte		=	*p++;
								highByte 	=	*p++;

								data		=	(highByte << 8) | lowByte;
   3f370:	c3 5d       	subi	r28, 0xD3	; 211
   3f372:	de 4f       	sbci	r29, 0xFE	; 254
   3f374:	58 83       	st	Y, r21
   3f376:	cd 52       	subi	r28, 0x2D	; 45
   3f378:	d1 40       	sbci	r29, 0x01	; 1
   3f37a:	c4 5d       	subi	r28, 0xD4	; 212
   3f37c:	de 4f       	sbci	r29, 0xFE	; 254
   3f37e:	18 82       	st	Y, r1
   3f380:	cc 52       	subi	r28, 0x2C	; 44
   3f382:	d1 40       	sbci	r29, 0x01	; 1
   3f384:	90 e0       	ldi	r25, 0x00	; 0
   3f386:	c4 5d       	subi	r28, 0xD4	; 212
   3f388:	de 4f       	sbci	r29, 0xFE	; 254
   3f38a:	e8 81       	ld	r30, Y
   3f38c:	f9 81       	ldd	r31, Y+1	; 0x01
   3f38e:	cc 52       	subi	r28, 0x2C	; 44
   3f390:	d1 40       	sbci	r29, 0x01	; 1
   3f392:	8e 2b       	or	r24, r30
   3f394:	9f 2b       	or	r25, r31
   3f396:	0c 01       	movw	r0, r24
								boot_page_fill(address,data);
   3f398:	f8 01       	movw	r30, r16
   3f39a:	20 93 5b 00 	sts	0x005B, r18
   3f39e:	40 93 57 00 	sts	0x0057, r20
   3f3a2:	e8 95       	spm
   3f3a4:	11 24       	eor	r1, r1
   3f3a6:	0e 5f       	subi	r16, 0xFE	; 254

								address	=	address + 2;	// Select next word in memory
   3f3a8:	1f 4f       	sbci	r17, 0xFF	; 255
   3f3aa:	2f 4f       	sbci	r18, 0xFF	; 255
   3f3ac:	3f 4f       	sbci	r19, 0xFF	; 255
   3f3ae:	62 50       	subi	r22, 0x02	; 2
								size	-=	2;				// Reduce number of bytes to write by two
   3f3b0:	70 40       	sbci	r23, 0x00	; 0
   3f3b2:	19 f0       	breq	.+6      	; 0x3f3ba <main+0x514>
							} while (size);					// Loop until all bytes written
   3f3b4:	8c 91       	ld	r24, X
							}

							/* Write FLASH */
							do {
								lowByte		=	*p++;
								highByte 	=	*p++;
   3f3b6:	12 96       	adiw	r26, 0x02	; 2
   3f3b8:	d8 cf       	rjmp	.-80     	; 0x3f36a <main+0x4c4>
   3f3ba:	85 e0       	ldi	r24, 0x05	; 5

								address	=	address + 2;	// Select next word in memory
								size	-=	2;				// Reduce number of bytes to write by two
							} while (size);					// Loop until all bytes written

							boot_page_write(tempaddress);
   3f3bc:	f2 01       	movw	r30, r4
   3f3be:	60 92 5b 00 	sts	0x005B, r6
   3f3c2:	80 93 57 00 	sts	0x0057, r24
   3f3c6:	e8 95       	spm
   3f3c8:	07 b6       	in	r0, 0x37	; 55
							boot_spm_busy_wait();
   3f3ca:	00 fc       	sbrc	r0, 0
   3f3cc:	fd cf       	rjmp	.-6      	; 0x3f3c8 <main+0x522>
   3f3ce:	81 e1       	ldi	r24, 0x11	; 17
							boot_rww_enable();				// Re-enable the RWW section
   3f3d0:	80 93 57 00 	sts	0x0057, r24
   3f3d4:	e8 95       	spm
   3f3d6:	24 c0       	rjmp	.+72     	; 0x3f420 <main+0x57a>
   3f3d8:	53 01       	movw	r10, r6
						}
						else
						{
							//*	issue 543, this should work, It has not been tested.
							uint16_t ii = address >> 1;
   3f3da:	42 01       	movw	r8, r4
   3f3dc:	b6 94       	lsr	r11
   3f3de:	a7 94       	ror	r10
   3f3e0:	97 94       	ror	r9
   3f3e2:	87 94       	ror	r8
   3f3e4:	00 e0       	ldi	r16, 0x00	; 0
							/* write EEPROM */
							while (size) {
   3f3e6:	10 e0       	ldi	r17, 0x00	; 0
   3f3e8:	2d e0       	ldi	r18, 0x0D	; 13

				case CMD_PROGRAM_FLASH_ISP:
				case CMD_PROGRAM_EEPROM_ISP:
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
						unsigned char	*p	=	msgBuffer+10;
   3f3ea:	e2 2e       	mov	r14, r18
   3f3ec:	f1 2c       	mov	r15, r1
   3f3ee:	ec 0e       	add	r14, r28
   3f3f0:	fd 1e       	adc	r15, r29
   3f3f2:	09 c0       	rjmp	.+18     	; 0x3f406 <main+0x560>
						else
						{
							//*	issue 543, this should work, It has not been tested.
							uint16_t ii = address >> 1;
							/* write EEPROM */
							while (size) {
   3f3f4:	d7 01       	movw	r26, r14
								eeprom_write_byte((uint8_t*)ii, *p++);
   3f3f6:	6d 91       	ld	r22, X+
   3f3f8:	7d 01       	movw	r14, r26
   3f3fa:	c8 01       	movw	r24, r16
void (*app_start)(void) = 0;
uint8_t check = 1;


//*****************************************************************************
int main(void)
   3f3fc:	88 0d       	add	r24, r8
   3f3fe:	99 1d       	adc	r25, r9
   3f400:	d8 d1       	rcall	.+944    	; 0x3f7b2 <__eewr_byte_m2560>
						{
							//*	issue 543, this should work, It has not been tested.
							uint16_t ii = address >> 1;
							/* write EEPROM */
							while (size) {
								eeprom_write_byte((uint8_t*)ii, *p++);
   3f402:	0f 5f       	subi	r16, 0xFF	; 255
   3f404:	1f 4f       	sbci	r17, 0xFF	; 255
   3f406:	0c 15       	cp	r16, r12
   3f408:	1d 05       	cpc	r17, r13
						else
						{
							//*	issue 543, this should work, It has not been tested.
							uint16_t ii = address >> 1;
							/* write EEPROM */
							while (size) {
   3f40a:	a1 f7       	brne	.-24     	; 0x3f3f4 <main+0x54e>
   3f40c:	20 e0       	ldi	r18, 0x00	; 0
   3f40e:	30 e0       	ldi	r19, 0x00	; 0
void (*app_start)(void) = 0;
uint8_t check = 1;


//*****************************************************************************
int main(void)
   3f410:	00 0f       	add	r16, r16
   3f412:	11 1f       	adc	r17, r17
   3f414:	22 1f       	adc	r18, r18
   3f416:	33 1f       	adc	r19, r19
   3f418:	04 0d       	add	r16, r4
   3f41a:	15 1d       	adc	r17, r5
						else
						{
							//*	issue 543, this should work, It has not been tested.
							uint16_t ii = address >> 1;
							/* write EEPROM */
							while (size) {
   3f41c:	26 1d       	adc	r18, r6
   3f41e:	37 1d       	adc	r19, r7
   3f420:	1c 82       	std	Y+4, r1	; 0x04
   3f422:	28 01       	movw	r4, r16
								ii++;
								size--;
							}
						}
						msgLength		=	2;
						msgBuffer[1]	=	STATUS_CMD_OK;
   3f424:	39 01       	movw	r6, r18
					}
					break;
   3f426:	62 c0       	rjmp	.+196    	; 0x3f4ec <main+0x646>
   3f428:	bc 81       	ldd	r27, Y+4	; 0x04
   3f42a:	c1 5d       	subi	r28, 0xD1	; 209

				case CMD_READ_FLASH_ISP:
				case CMD_READ_EEPROM_ISP:
					{
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
   3f42c:	de 4f       	sbci	r29, 0xFE	; 254
   3f42e:	b8 83       	st	Y, r27
   3f430:	cf 52       	subi	r28, 0x2F	; 47
   3f432:	d1 40       	sbci	r29, 0x01	; 1
   3f434:	c2 5d       	subi	r28, 0xD2	; 210
   3f436:	de 4f       	sbci	r29, 0xFE	; 254
   3f438:	18 82       	st	Y, r1
   3f43a:	ce 52       	subi	r28, 0x2E	; 46
   3f43c:	d1 40       	sbci	r29, 0x01	; 1
   3f43e:	2d 81       	ldd	r18, Y+5	; 0x05
   3f440:	30 e0       	ldi	r19, 0x00	; 0
   3f442:	c2 5d       	subi	r28, 0xD2	; 210
   3f444:	de 4f       	sbci	r29, 0xFE	; 254
   3f446:	e8 81       	ld	r30, Y
   3f448:	f9 81       	ldd	r31, Y+1	; 0x01
   3f44a:	ce 52       	subi	r28, 0x2E	; 46
   3f44c:	d1 40       	sbci	r29, 0x01	; 1
   3f44e:	2e 2b       	or	r18, r30
   3f450:	3f 2b       	or	r19, r31
   3f452:	b3 e0       	ldi	r27, 0x03	; 3
   3f454:	cb 2e       	mov	r12, r27
						unsigned char	*p		=	msgBuffer+1;
						msgLength				=	size+3;
   3f456:	d1 2c       	mov	r13, r1
   3f458:	c2 0e       	add	r12, r18
   3f45a:	d3 1e       	adc	r13, r19
   3f45c:	1c 82       	std	Y+4, r1	; 0x04
   3f45e:	84 31       	cpi	r24, 0x14	; 20

						*p++	=	STATUS_CMD_OK;
   3f460:	c9 f4       	brne	.+50     	; 0x3f494 <main+0x5ee>
						if (msgBuffer[0] == CMD_READ_FLASH_ISP )
   3f462:	de 01       	movw	r26, r28
   3f464:	15 96       	adiw	r26, 0x05	; 5
   3f466:	a9 01       	movw	r20, r18
   3f468:	9d 01       	movw	r18, r26
   3f46a:	d3 01       	movw	r26, r6
   3f46c:	c2 01       	movw	r24, r4
   3f46e:	ab bf       	out	0x3b, r26	; 59
   3f470:	fc 01       	movw	r30, r24

							// Read FLASH
							do {
						//#if defined(RAMPZ)
						#if (FLASHEND > 0x10000)
								data	=	pgm_read_word_far(address);
   3f472:	67 91       	elpm	r22, Z+
   3f474:	76 91       	elpm	r23, Z
   3f476:	f9 01       	movw	r30, r18
   3f478:	60 83       	st	Z, r22
						#else
								data	=	pgm_read_word_near(address);
						#endif
								*p++	=	(unsigned char)data;		//LSB
   3f47a:	71 83       	std	Z+1, r23	; 0x01
   3f47c:	2e 5f       	subi	r18, 0xFE	; 254
								*p++	=	(unsigned char)(data >> 8);	//MSB
   3f47e:	3f 4f       	sbci	r19, 0xFF	; 255
void (*app_start)(void) = 0;
uint8_t check = 1;


//*****************************************************************************
int main(void)
   3f480:	02 96       	adiw	r24, 0x02	; 2
   3f482:	a1 1d       	adc	r26, r1
						#else
								data	=	pgm_read_word_near(address);
						#endif
								*p++	=	(unsigned char)data;		//LSB
								*p++	=	(unsigned char)(data >> 8);	//MSB
								address	+=	2;							// Select next word in memory
   3f484:	b1 1d       	adc	r27, r1
   3f486:	42 50       	subi	r20, 0x02	; 2
   3f488:	50 40       	sbci	r21, 0x00	; 0
								size	-=	2;
   3f48a:	89 f7       	brne	.-30     	; 0x3f46e <main+0x5c8>
   3f48c:	2c 01       	movw	r4, r24
							}while (size);
   3f48e:	3d 01       	movw	r6, r26
   3f490:	d9 01       	movw	r26, r18
   3f492:	28 c0       	rjmp	.+80     	; 0x3f4e4 <main+0x63e>
   3f494:	f9 01       	movw	r30, r18
   3f496:	b3 01       	movw	r22, r6
						unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
						unsigned char	*p		=	msgBuffer+1;
						msgLength				=	size+3;

						*p++	=	STATUS_CMD_OK;
						if (msgBuffer[0] == CMD_READ_FLASH_ISP )
   3f498:	a2 01       	movw	r20, r4
   3f49a:	8e 01       	movw	r16, r28
   3f49c:	0b 5f       	subi	r16, 0xFB	; 251
   3f49e:	1f 4f       	sbci	r17, 0xFF	; 255
   3f4a0:	41 bd       	out	0x21, r20	; 33
   3f4a2:	bb 27       	eor	r27, r27
						}
						else
						{
							/* Read EEPROM */
							do {
								EEARL	=	address;			// Setup EEPROM address
   3f4a4:	a7 2f       	mov	r26, r23
								EEARH	=	((address >> 8));
   3f4a6:	96 2f       	mov	r25, r22
   3f4a8:	85 2f       	mov	r24, r21
   3f4aa:	82 bd       	out	0x22, r24	; 34
   3f4ac:	4f 5f       	subi	r20, 0xFF	; 255
   3f4ae:	5f 4f       	sbci	r21, 0xFF	; 255
								address++;					// Select next EEPROM byte
   3f4b0:	6f 4f       	sbci	r22, 0xFF	; 255
   3f4b2:	7f 4f       	sbci	r23, 0xFF	; 255
   3f4b4:	f8 9a       	sbi	0x1f, 0	; 31
   3f4b6:	80 b5       	in	r24, 0x20	; 32
								EECR	|=	(1<<EERE);			// Read EEPROM
   3f4b8:	d8 01       	movw	r26, r16
								*p++	=	EEDR;				// Send EEPROM data
   3f4ba:	8d 93       	st	X+, r24
   3f4bc:	8d 01       	movw	r16, r26
   3f4be:	31 97       	sbiw	r30, 0x01	; 1
   3f4c0:	79 f7       	brne	.-34     	; 0x3f4a0 <main+0x5fa>
								size--;
   3f4c2:	c9 01       	movw	r24, r18
							} while (size);
   3f4c4:	01 97       	sbiw	r24, 0x01	; 1
void (*app_start)(void) = 0;
uint8_t check = 1;


//*****************************************************************************
int main(void)
   3f4c6:	a0 e0       	ldi	r26, 0x00	; 0
   3f4c8:	b0 e0       	ldi	r27, 0x00	; 0
   3f4ca:	01 96       	adiw	r24, 0x01	; 1
   3f4cc:	a1 1d       	adc	r26, r1
   3f4ce:	b1 1d       	adc	r27, r1
   3f4d0:	48 0e       	add	r4, r24
   3f4d2:	59 1e       	adc	r5, r25
								EEARH	=	((address >> 8));
								address++;					// Select next EEPROM byte
								EECR	|=	(1<<EERE);			// Read EEPROM
								*p++	=	EEDR;				// Send EEPROM data
								size--;
							} while (size);
   3f4d4:	6a 1e       	adc	r6, r26
   3f4d6:	7b 1e       	adc	r7, r27
   3f4d8:	a5 e0       	ldi	r26, 0x05	; 5
   3f4da:	b0 e0       	ldi	r27, 0x00	; 0
   3f4dc:	ac 0f       	add	r26, r28
   3f4de:	bd 1f       	adc	r27, r29
   3f4e0:	a2 0f       	add	r26, r18
   3f4e2:	b3 1f       	adc	r27, r19
   3f4e4:	1c 92       	st	X, r1
   3f4e6:	05 c0       	rjmp	.+10     	; 0x3f4f2 <main+0x64c>
						}
						*p++	=	STATUS_CMD_OK;
   3f4e8:	80 ec       	ldi	r24, 0xC0	; 192
					}
					break;
   3f4ea:	8c 83       	std	Y+4, r24	; 0x04

				default:
					msgLength		=	2;
					msgBuffer[1]	=	STATUS_CMD_FAILED;
   3f4ec:	32 e0       	ldi	r19, 0x02	; 2
   3f4ee:	c3 2e       	mov	r12, r19
						*p++	=	STATUS_CMD_OK;
					}
					break;

				default:
					msgLength		=	2;
   3f4f0:	d1 2c       	mov	r13, r1
   3f4f2:	8b e1       	ldi	r24, 0x1B	; 27
   3f4f4:	0f 94 a1 f0 	call	0x3e142	; 0x3e142 <sendchar>
			}

			/*
			 * Now send answer message back
			 */
			sendchar(MESSAGE_START);
   3f4f8:	83 2d       	mov	r24, r3
   3f4fa:	0f 94 a1 f0 	call	0x3e142	; 0x3e142 <sendchar>
			checksum	=	MESSAGE_START^0;

			sendchar(seqNum);
   3f4fe:	8d 2d       	mov	r24, r13
   3f500:	0f 94 a1 f0 	call	0x3e142	; 0x3e142 <sendchar>
			checksum	^=	seqNum;

			c			=	((msgLength>>8)&0xFF);
			sendchar(c);
   3f504:	8c 2d       	mov	r24, r12
   3f506:	0f 94 a1 f0 	call	0x3e142	; 0x3e142 <sendchar>
			checksum	^=	c;

			c			=	msgLength&0x00FF;
			sendchar(c);
   3f50a:	8e e0       	ldi	r24, 0x0E	; 14
   3f50c:	0f 94 a1 f0 	call	0x3e142	; 0x3e142 <sendchar>
			checksum ^= c;

			sendchar(TOKEN);
   3f510:	95 e1       	ldi	r25, 0x15	; 21
   3f512:	e9 2e       	mov	r14, r25
			sendchar(seqNum);
			checksum	^=	seqNum;

			c			=	((msgLength>>8)&0xFF);
			sendchar(c);
			checksum	^=	c;
   3f514:	e3 24       	eor	r14, r3
   3f516:	ec 24       	eor	r14, r12
   3f518:	ed 24       	eor	r14, r13

			c			=	msgLength&0x00FF;
			sendchar(c);
			checksum ^= c;
   3f51a:	23 e0       	ldi	r18, 0x03	; 3

			sendchar(TOKEN);
			checksum ^= TOKEN;
   3f51c:	82 2e       	mov	r8, r18

			p	=	msgBuffer;
   3f51e:	91 2c       	mov	r9, r1
   3f520:	8c 0e       	add	r8, r28
   3f522:	9d 1e       	adc	r9, r29
   3f524:	0a c0       	rjmp	.+20     	; 0x3f53a <main+0x694>
   3f526:	f4 01       	movw	r30, r8
			while ( msgLength )
   3f528:	11 91       	ld	r17, Z+
			{
				c	=	*p++;
   3f52a:	4f 01       	movw	r8, r30
   3f52c:	81 2f       	mov	r24, r17
   3f52e:	0f 94 a1 f0 	call	0x3e142	; 0x3e142 <sendchar>
				sendchar(c);
   3f532:	e1 26       	eor	r14, r17
   3f534:	08 94       	sec
				checksum ^=c;
   3f536:	c1 08       	sbc	r12, r1
				msgLength--;
   3f538:	d1 08       	sbc	r13, r1
   3f53a:	c1 14       	cp	r12, r1
   3f53c:	d1 04       	cpc	r13, r1

			sendchar(TOKEN);
			checksum ^= TOKEN;

			p	=	msgBuffer;
			while ( msgLength )
   3f53e:	99 f7       	brne	.-26     	; 0x3f526 <main+0x680>
   3f540:	8e 2d       	mov	r24, r14
   3f542:	0f 94 a1 f0 	call	0x3e142	; 0x3e142 <sendchar>
				c	=	*p++;
				sendchar(c);
				checksum ^=c;
				msgLength--;
			}
			sendchar(checksum);
   3f546:	33 94       	inc	r3
   3f548:	85 b1       	in	r24, 0x05	; 5
			seqNum++;
   3f54a:	80 58       	subi	r24, 0x80	; 128
	
		#ifndef REMOVE_BOOTLOADER_LED
			//*	<MLS>	toggle the LED
			PROGLED_PORT	^=	(1<<PROGLED_PIN);	// active high LED ON
   3f54c:	85 b9       	out	0x05, r24	; 5
   3f54e:	22 20       	and	r2, r2
   3f550:	09 f0       	breq	.+2      	; 0x3f554 <main+0x6ae>


	if (boot_state==1)
	{
		//*	main loop
		while (!isLeave)
   3f552:	a2 c0       	rjmp	.+324    	; 0x3f698 <main+0x7f2>
   3f554:	80 e0       	ldi	r24, 0x00	; 0
   3f556:	90 e0       	ldi	r25, 0x00	; 0
   3f558:	2d c0       	rjmp	.+90     	; 0x3f5b4 <main+0x70e>
   3f55a:	ca 5d       	subi	r28, 0xDA	; 218
   3f55c:	de 4f       	sbci	r29, 0xFE	; 254
        
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
		}


	if (boot_state==1)
   3f55e:	19 82       	std	Y+1, r1	; 0x01
   3f560:	18 82       	st	Y, r1
   3f562:	c6 52       	subi	r28, 0x26	; 38
   3f564:	d1 40       	sbci	r29, 0x01	; 1
   3f566:	cc 5d       	subi	r28, 0xDC	; 220
   3f568:	de 4f       	sbci	r29, 0xFE	; 254
   3f56a:	19 82       	std	Y+1, r1	; 0x01
   3f56c:	18 82       	st	Y, r1
   3f56e:	c4 52       	subi	r28, 0x24	; 36
   3f570:	d1 40       	sbci	r29, 0x01	; 1
   3f572:	33 24       	eor	r3, r3
   3f574:	10 e0       	ldi	r17, 0x00	; 0
   3f576:	c8 5d       	subi	r28, 0xD8	; 216
   3f578:	de 4f       	sbci	r29, 0xFE	; 254
   3f57a:	19 82       	std	Y+1, r1	; 0x01
   3f57c:	18 82       	st	Y, r1
   3f57e:	c8 52       	subi	r28, 0x28	; 40
   3f580:	d1 40       	sbci	r29, 0x01	; 1
   3f582:	c0 5e       	subi	r28, 0xE0	; 224
   3f584:	de 4f       	sbci	r29, 0xFE	; 254
   3f586:	18 82       	st	Y, r1
   3f588:	19 82       	std	Y+1, r1	; 0x01
   3f58a:	1a 82       	std	Y+2, r1	; 0x02
   3f58c:	1b 82       	std	Y+3, r1	; 0x03
   3f58e:	c0 52       	subi	r28, 0x20	; 32
   3f590:	d1 40       	sbci	r29, 0x01	; 1
   3f592:	44 24       	eor	r4, r4
   3f594:	55 24       	eor	r5, r5
   3f596:	32 01       	movw	r6, r4
   3f598:	20 e0       	ldi	r18, 0x00	; 0
   3f59a:	30 e0       	ldi	r19, 0x00	; 0
		count++;
		if (count > MAX_TIME_COUNT)
		{
		unsigned int	data;
		#if (FLASHEND > 0x10000)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
   3f59c:	a9 01       	movw	r20, r18
   3f59e:	4b bf       	out	0x3b, r20	; 59
   3f5a0:	f9 01       	movw	r30, r18
   3f5a2:	47 91       	elpm	r20, Z+
   3f5a4:	56 91       	elpm	r21, Z
   3f5a6:	c0 5d       	subi	r28, 0xD0	; 208
   3f5a8:	de 4f       	sbci	r29, 0xFE	; 254
   3f5aa:	59 83       	std	Y+1, r21	; 0x01
   3f5ac:	48 83       	st	Y, r20
   3f5ae:	c0 53       	subi	r28, 0x30	; 48
   3f5b0:	d1 40       	sbci	r29, 0x01	; 1
   3f5b2:	e1 2e       	mov	r14, r17
   3f5b4:	40 e0       	ldi	r20, 0x00	; 0
   3f5b6:	50 e0       	ldi	r21, 0x00	; 0
	}
	//************************************************************************
#endif


	boot_timer	=	0;
   3f5b8:	20 e0       	ldi	r18, 0x00	; 0
   3f5ba:	cc 5d       	subi	r28, 0xDC	; 220
   3f5bc:	de 4f       	sbci	r29, 0xFE	; 254
   3f5be:	08 81       	ld	r16, Y
   3f5c0:	19 81       	ldd	r17, Y+1	; 0x01
   3f5c2:	c4 52       	subi	r28, 0x24	; 36
   3f5c4:	d1 40       	sbci	r29, 0x01	; 1
   3f5c6:	ca 5d       	subi	r28, 0xDA	; 218
   3f5c8:	de 4f       	sbci	r29, 0xFE	; 254
   3f5ca:	c8 80       	ld	r12, Y
   3f5cc:	d9 80       	ldd	r13, Y+1	; 0x01
   3f5ce:	c6 52       	subi	r28, 0x26	; 38
   3f5d0:	d1 40       	sbci	r29, 0x01	; 1
   3f5d2:	c8 5d       	subi	r28, 0xD8	; 216
   3f5d4:	de 4f       	sbci	r29, 0xFE	; 254
   3f5d6:	68 81       	ld	r22, Y
   3f5d8:	79 81       	ldd	r23, Y+1	; 0x01
   3f5da:	c8 52       	subi	r28, 0x28	; 40
   3f5dc:	d1 40       	sbci	r29, 0x01	; 1
   3f5de:	d3 cc       	rjmp	.-1626   	; 0x3ef86 <main+0xe0>
   3f5e0:	82 30       	cpi	r24, 0x02	; 2
   3f5e2:	91 05       	cpc	r25, r1
		#endif

		}
	}
    
    if(boot_state == 2){
   3f5e4:	09 f0       	breq	.+2      	; 0x3f5e8 <main+0x742>
   3f5e6:	58 c0       	rjmp	.+176    	; 0x3f698 <main+0x7f2>
   3f5e8:	8f ef       	ldi	r24, 0xFF	; 255
   3f5ea:	91 e0       	ldi	r25, 0x01	; 1
        if(eeprom_read_byte(0x1FF) == 0xF0){
   3f5ec:	da d0       	rcall	.+436    	; 0x3f7a2 <__eerd_byte_m2560>
   3f5ee:	80 3f       	cpi	r24, 0xF0	; 240
   3f5f0:	09 f0       	breq	.+2      	; 0x3f5f4 <main+0x74e>
   3f5f2:	52 c0       	rjmp	.+164    	; 0x3f698 <main+0x7f2>
   3f5f4:	87 e1       	ldi	r24, 0x17	; 23
   3f5f6:	92 e0       	ldi	r25, 0x02	; 2
   3f5f8:	0f 94 59 f2 	call	0x3e4b2	; 0x3e4b2 <pf_mount>
           pf_mount(&Fatfs);	/* Initialize file system */
   3f5fc:	80 e0       	ldi	r24, 0x00	; 0
   3f5fe:	92 e0       	ldi	r25, 0x02	; 2
   3f600:	74 d8       	rcall	.-3864   	; 0x3e6ea <pf_open>
           if(pf_open("firmware.bin") == FR_OK){
   3f602:	88 23       	and	r24, r24
   3f604:	09 f0       	breq	.+2      	; 0x3f608 <main+0x762>
   3f606:	48 c0       	rjmp	.+144    	; 0x3f698 <main+0x7f2>
   3f608:	8d e0       	ldi	r24, 0x0D	; 13
   3f60a:	0f 94 a1 f0 	call	0x3e142	; 0x3e142 <sendchar>
   3f60e:	8a e0       	ldi	r24, 0x0A	; 10
               DWORD fa;	/* Flash address */
               WORD br;	/* Bytes read */
               uint8_t i = 0;
               sendchar(0x0d);
   3f610:	0f 94 a1 f0 	call	0x3e142	; 0x3e142 <sendchar>
   3f614:	88 24       	eor	r8, r8
               sendchar(0x0a);
   3f616:	99 24       	eor	r9, r9
   3f618:	54 01       	movw	r10, r8
   3f61a:	85 b1       	in	r24, 0x05	; 5
               for (fa = 0; fa < 0x3E000; fa += SPM_PAGESIZE) {	/* Update all application pages */
   3f61c:	80 58       	subi	r24, 0x80	; 128
   3f61e:	85 b9       	out	0x05, r24	; 5
   3f620:	82 e3       	ldi	r24, 0x32	; 50
                   PROGLED_PORT	^=	(1<<PROGLED_PIN);	// turn LED ON
   3f622:	90 e0       	ldi	r25, 0x00	; 0
   3f624:	0f 94 ad f0 	call	0x3e15a	; 0x3e15a <delay_ms>
                   delay_ms(50);
   3f628:	c5 01       	movw	r24, r10
   3f62a:	b4 01       	movw	r22, r8
   3f62c:	0e dc       	rcall	.-2020   	; 0x3ee4a <flash_erase>
   3f62e:	89 e4       	ldi	r24, 0x49	; 73
                   flash_erase(fa);					/* Erase a page */
   3f630:	92 e0       	ldi	r25, 0x02	; 2
   3f632:	6f ef       	ldi	r22, 0xFF	; 255
   3f634:	70 e0       	ldi	r23, 0x00	; 0
   3f636:	40 e0       	ldi	r20, 0x00	; 0
                   memset(Buff, 0xFF, SPM_PAGESIZE);	/* Clear buffer */
   3f638:	51 e0       	ldi	r21, 0x01	; 1
   3f63a:	ac d0       	rcall	.+344    	; 0x3f794 <memset>
   3f63c:	89 e4       	ldi	r24, 0x49	; 73
   3f63e:	92 e0       	ldi	r25, 0x02	; 2
   3f640:	60 e0       	ldi	r22, 0x00	; 0
   3f642:	71 e0       	ldi	r23, 0x01	; 1
   3f644:	ae 01       	movw	r20, r28
   3f646:	4f 5f       	subi	r20, 0xFF	; 255
                   pf_read(Buff, SPM_PAGESIZE, &br);	/* Load a page data */
   3f648:	5f 4f       	sbci	r21, 0xFF	; 255
   3f64a:	c8 d9       	rcall	.-3184   	; 0x3e9dc <pf_read>
   3f64c:	89 81       	ldd	r24, Y+1	; 0x01
   3f64e:	9a 81       	ldd	r25, Y+2	; 0x02
   3f650:	00 97       	sbiw	r24, 0x00	; 0
   3f652:	29 f0       	breq	.+10     	; 0x3f65e <main+0x7b8>
   3f654:	c5 01       	movw	r24, r10
   3f656:	b4 01       	movw	r22, r8
   3f658:	49 e4       	ldi	r20, 0x49	; 73
                   if(br) flash_write(fa, Buff);		/* Write it if the data is available */
   3f65a:	52 e0       	ldi	r21, 0x02	; 2
   3f65c:	05 dc       	rcall	.-2038   	; 0x3ee68 <flash_write>
   3f65e:	80 e0       	ldi	r24, 0x00	; 0
   3f660:	91 e0       	ldi	r25, 0x01	; 1
   3f662:	a0 e0       	ldi	r26, 0x00	; 0
   3f664:	b0 e0       	ldi	r27, 0x00	; 0
   3f666:	88 0e       	add	r8, r24
   3f668:	99 1e       	adc	r9, r25
   3f66a:	aa 1e       	adc	r10, r26
   3f66c:	bb 1e       	adc	r11, r27
               DWORD fa;	/* Flash address */
               WORD br;	/* Bytes read */
               uint8_t i = 0;
               sendchar(0x0d);
               sendchar(0x0a);
               for (fa = 0; fa < 0x3E000; fa += SPM_PAGESIZE) {	/* Update all application pages */
   3f66e:	90 e0       	ldi	r25, 0x00	; 0
   3f670:	89 16       	cp	r8, r25
   3f672:	90 ee       	ldi	r25, 0xE0	; 224
   3f674:	99 06       	cpc	r9, r25
   3f676:	93 e0       	ldi	r25, 0x03	; 3
   3f678:	a9 06       	cpc	r10, r25
   3f67a:	90 e0       	ldi	r25, 0x00	; 0
   3f67c:	b9 06       	cpc	r11, r25
   3f67e:	69 f6       	brne	.-102    	; 0x3f61a <main+0x774>
   3f680:	8d e0       	ldi	r24, 0x0D	; 13
   3f682:	0f 94 a1 f0 	call	0x3e142	; 0x3e142 <sendchar>
   3f686:	8a e0       	ldi	r24, 0x0A	; 10
   3f688:	0f 94 a1 f0 	call	0x3e142	; 0x3e142 <sendchar>
   3f68c:	10 92 0d 02 	sts	0x020D, r1
                   flash_erase(fa);					/* Erase a page */
                   memset(Buff, 0xFF, SPM_PAGESIZE);	/* Clear buffer */
                   pf_read(Buff, SPM_PAGESIZE, &br);	/* Load a page data */
                   if(br) flash_write(fa, Buff);		/* Write it if the data is available */
                }
               sendchar(0x0d);
   3f690:	8f ef       	ldi	r24, 0xFF	; 255
   3f692:	91 e0       	ldi	r25, 0x01	; 1
   3f694:	6f ef       	ldi	r22, 0xFF	; 255
               sendchar(0x0a);
   3f696:	8d d0       	rcall	.+282    	; 0x3f7b2 <__eewr_byte_m2560>
   3f698:	00 00       	nop
   3f69a:	80 91 c0 00 	lds	r24, 0x00C0
               check = 0;
   3f69e:	8d 7f       	andi	r24, 0xFD	; 253
               eeprom_write_byte (0x1FF, 0xFF);
   3f6a0:	80 93 c0 00 	sts	0x00C0, r24
   3f6a4:	81 e1       	ldi	r24, 0x11	; 17
   3f6a6:	80 93 57 00 	sts	0x0057, r24
           }
        }
    }


	asm volatile ("nop");			// wait until port has changed
   3f6aa:	e8 95       	spm
    
	/*
	 * Now leave bootloader
	 */

	UART_STATUS_REG	&=	0xfd;
   3f6ac:	ee 27       	eor	r30, r30
   3f6ae:	ff 27       	eor	r31, r31
   3f6b0:	09 94       	ijmp
   3f6b2:	ff cf       	rjmp	.-2      	; 0x3f6b2 <main+0x80c>
   3f6b4:	8b e1       	ldi	r24, 0x1B	; 27
	boot_rww_enable();				// enable application section
   3f6b6:	e8 2e       	mov	r14, r24
   3f6b8:	21 e0       	ldi	r18, 0x01	; 1
   3f6ba:	63 cc       	rjmp	.-1850   	; 0x3ef82 <main+0xdc>
   3f6bc:	20 e0       	ldi	r18, 0x00	; 0


	asm volatile(
   3f6be:	61 cc       	rjmp	.-1854   	; 0x3ef82 <main+0xdc>
   3f6c0:	26 e0       	ldi	r18, 0x06	; 6
   3f6c2:	5f cc       	rjmp	.-1858   	; 0x3ef82 <main+0xdc>

0003f6c4 <__mulsi3>:
   3f6c4:	62 9f       	mul	r22, r18
   3f6c6:	d0 01       	movw	r26, r0
   3f6c8:	73 9f       	mul	r23, r19
   3f6ca:	f0 01       	movw	r30, r0
   3f6cc:	82 9f       	mul	r24, r18
   3f6ce:	e0 0d       	add	r30, r0
   3f6d0:	f1 1d       	adc	r31, r1
   3f6d2:	64 9f       	mul	r22, r20
   3f6d4:	e0 0d       	add	r30, r0
   3f6d6:	f1 1d       	adc	r31, r1
   3f6d8:	92 9f       	mul	r25, r18
   3f6da:	f0 0d       	add	r31, r0
   3f6dc:	83 9f       	mul	r24, r19
   3f6de:	f0 0d       	add	r31, r0
   3f6e0:	74 9f       	mul	r23, r20
   3f6e2:	f0 0d       	add	r31, r0
   3f6e4:	65 9f       	mul	r22, r21
   3f6e6:	f0 0d       	add	r31, r0
   3f6e8:	99 27       	eor	r25, r25
   3f6ea:	72 9f       	mul	r23, r18
   3f6ec:	b0 0d       	add	r27, r0
   3f6ee:	e1 1d       	adc	r30, r1
   3f6f0:	f9 1f       	adc	r31, r25
   3f6f2:	63 9f       	mul	r22, r19
   3f6f4:	b0 0d       	add	r27, r0
   3f6f6:	e1 1d       	adc	r30, r1
   3f6f8:	f9 1f       	adc	r31, r25
   3f6fa:	bd 01       	movw	r22, r26
   3f6fc:	cf 01       	movw	r24, r30
   3f6fe:	11 24       	eor	r1, r1
   3f700:	08 95       	ret

0003f702 <__divmodhi4>:
   3f702:	97 fb       	bst	r25, 7
   3f704:	09 2e       	mov	r0, r25
   3f706:	07 26       	eor	r0, r23
   3f708:	0a d0       	rcall	.+20     	; 0x3f71e <__divmodhi4_neg1>
   3f70a:	77 fd       	sbrc	r23, 7
   3f70c:	04 d0       	rcall	.+8      	; 0x3f716 <__divmodhi4_neg2>
   3f70e:	2e d0       	rcall	.+92     	; 0x3f76c <__udivmodhi4>
   3f710:	06 d0       	rcall	.+12     	; 0x3f71e <__divmodhi4_neg1>
   3f712:	00 20       	and	r0, r0
   3f714:	1a f4       	brpl	.+6      	; 0x3f71c <__divmodhi4_exit>

0003f716 <__divmodhi4_neg2>:
   3f716:	70 95       	com	r23
   3f718:	61 95       	neg	r22
   3f71a:	7f 4f       	sbci	r23, 0xFF	; 255

0003f71c <__divmodhi4_exit>:
   3f71c:	08 95       	ret

0003f71e <__divmodhi4_neg1>:
   3f71e:	f6 f7       	brtc	.-4      	; 0x3f71c <__divmodhi4_exit>
   3f720:	90 95       	com	r25
   3f722:	81 95       	neg	r24
   3f724:	9f 4f       	sbci	r25, 0xFF	; 255
   3f726:	08 95       	ret

0003f728 <__udivmodsi4>:
   3f728:	a1 e2       	ldi	r26, 0x21	; 33
   3f72a:	1a 2e       	mov	r1, r26
   3f72c:	aa 1b       	sub	r26, r26
   3f72e:	bb 1b       	sub	r27, r27
   3f730:	fd 01       	movw	r30, r26
   3f732:	0d c0       	rjmp	.+26     	; 0x3f74e <__udivmodsi4_ep>

0003f734 <__udivmodsi4_loop>:
   3f734:	aa 1f       	adc	r26, r26
   3f736:	bb 1f       	adc	r27, r27
   3f738:	ee 1f       	adc	r30, r30
   3f73a:	ff 1f       	adc	r31, r31
   3f73c:	a2 17       	cp	r26, r18
   3f73e:	b3 07       	cpc	r27, r19
   3f740:	e4 07       	cpc	r30, r20
   3f742:	f5 07       	cpc	r31, r21
   3f744:	20 f0       	brcs	.+8      	; 0x3f74e <__udivmodsi4_ep>
   3f746:	a2 1b       	sub	r26, r18
   3f748:	b3 0b       	sbc	r27, r19
   3f74a:	e4 0b       	sbc	r30, r20
   3f74c:	f5 0b       	sbc	r31, r21

0003f74e <__udivmodsi4_ep>:
   3f74e:	66 1f       	adc	r22, r22
   3f750:	77 1f       	adc	r23, r23
   3f752:	88 1f       	adc	r24, r24
   3f754:	99 1f       	adc	r25, r25
   3f756:	1a 94       	dec	r1
   3f758:	69 f7       	brne	.-38     	; 0x3f734 <__udivmodsi4_loop>
   3f75a:	60 95       	com	r22
   3f75c:	70 95       	com	r23
   3f75e:	80 95       	com	r24
   3f760:	90 95       	com	r25
   3f762:	9b 01       	movw	r18, r22
   3f764:	ac 01       	movw	r20, r24
   3f766:	bd 01       	movw	r22, r26
   3f768:	cf 01       	movw	r24, r30
   3f76a:	08 95       	ret

0003f76c <__udivmodhi4>:
   3f76c:	aa 1b       	sub	r26, r26
   3f76e:	bb 1b       	sub	r27, r27
   3f770:	51 e1       	ldi	r21, 0x11	; 17
   3f772:	07 c0       	rjmp	.+14     	; 0x3f782 <__udivmodhi4_ep>

0003f774 <__udivmodhi4_loop>:
   3f774:	aa 1f       	adc	r26, r26
   3f776:	bb 1f       	adc	r27, r27
   3f778:	a6 17       	cp	r26, r22
   3f77a:	b7 07       	cpc	r27, r23
   3f77c:	10 f0       	brcs	.+4      	; 0x3f782 <__udivmodhi4_ep>
   3f77e:	a6 1b       	sub	r26, r22
   3f780:	b7 0b       	sbc	r27, r23

0003f782 <__udivmodhi4_ep>:
   3f782:	88 1f       	adc	r24, r24
   3f784:	99 1f       	adc	r25, r25
   3f786:	5a 95       	dec	r21
   3f788:	a9 f7       	brne	.-22     	; 0x3f774 <__udivmodhi4_loop>
   3f78a:	80 95       	com	r24
   3f78c:	90 95       	com	r25
   3f78e:	bc 01       	movw	r22, r24
   3f790:	cd 01       	movw	r24, r26
   3f792:	08 95       	ret

0003f794 <memset>:
   3f794:	dc 01       	movw	r26, r24
   3f796:	01 c0       	rjmp	.+2      	; 0x3f79a <memset+0x6>
   3f798:	6d 93       	st	X+, r22
   3f79a:	41 50       	subi	r20, 0x01	; 1
   3f79c:	50 40       	sbci	r21, 0x00	; 0
   3f79e:	e0 f7       	brcc	.-8      	; 0x3f798 <memset+0x4>
   3f7a0:	08 95       	ret

0003f7a2 <__eerd_byte_m2560>:
   3f7a2:	f9 99       	sbic	0x1f, 1	; 31
   3f7a4:	fe cf       	rjmp	.-4      	; 0x3f7a2 <__eerd_byte_m2560>
   3f7a6:	92 bd       	out	0x22, r25	; 34
   3f7a8:	81 bd       	out	0x21, r24	; 33
   3f7aa:	f8 9a       	sbi	0x1f, 0	; 31
   3f7ac:	99 27       	eor	r25, r25
   3f7ae:	80 b5       	in	r24, 0x20	; 32
   3f7b0:	08 95       	ret

0003f7b2 <__eewr_byte_m2560>:
   3f7b2:	26 2f       	mov	r18, r22

0003f7b4 <__eewr_r18_m2560>:
   3f7b4:	f9 99       	sbic	0x1f, 1	; 31
   3f7b6:	fe cf       	rjmp	.-4      	; 0x3f7b4 <__eewr_r18_m2560>
   3f7b8:	1f ba       	out	0x1f, r1	; 31
   3f7ba:	92 bd       	out	0x22, r25	; 34
   3f7bc:	81 bd       	out	0x21, r24	; 33
   3f7be:	20 bd       	out	0x20, r18	; 32
   3f7c0:	0f b6       	in	r0, 0x3f	; 63
   3f7c2:	f8 94       	cli
   3f7c4:	fa 9a       	sbi	0x1f, 2	; 31
   3f7c6:	f9 9a       	sbi	0x1f, 1	; 31
   3f7c8:	0f be       	out	0x3f, r0	; 63
   3f7ca:	01 96       	adiw	r24, 0x01	; 1
   3f7cc:	08 95       	ret

0003f7ce <_exit>:
   3f7ce:	f8 94       	cli

0003f7d0 <__stop_program>:
   3f7d0:	ff cf       	rjmp	.-2      	; 0x3f7d0 <__stop_program>
